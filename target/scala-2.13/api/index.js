Index.PACKAGES = {"scala" : [{"name" : "scala.InfiniteIterator", "object" : "scala\/InfiniteIterator$.html", "members_object" : [{"label" : "cross", "tail" : "(xs: InfiniteIterator[A], val_ys: InfiniteIterator[B]): InfiniteIterator[(A, B)]", "member" : "scala.InfiniteIterator.cross", "link" : "scala\/InfiniteIterator$.html#cross[A,B](xs:InfiniteIterator[A],val_ys:InfiniteIterator[B]):InfiniteIterator[(A,B)]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: InfiniteIterator[InfiniteIterator[A]]): InfiniteIterator[A] { ... \/* 5 definitions in type refinement *\/ }", "member" : "scala.InfiniteIterator.concat", "link" : "scala\/InfiniteIterator$.html#concat[A](xss:InfiniteIterator[InfiniteIterator[A]]):InfiniteIterator[A]{defi:Int;defi_=(x$1:Int):Unit;defj:Int;defj_=(x$1:Int):Unit;valarr:scala.collection.mutable.ArrayBuffer[InfiniteIterator[A]]}", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: InfiniteIterator[A]*): InfiniteIterator[A] { ... \/* 2 definitions in type refinement *\/ }", "member" : "scala.InfiniteIterator.apply", "link" : "scala\/InfiniteIterator$.html#apply[A](xs:InfiniteIterator[A]*):InfiniteIterator[A]{defi:Int;defi_=(x$1:Int):Unit}", "kind" : "def"}, {"label" : "single", "tail" : "(x: A): InfiniteIterator[A] { val next: A }", "member" : "scala.InfiniteIterator.single", "link" : "scala\/InfiniteIterator$.html#single[A](x:A):InfiniteIterator[A]{valnext:A}", "kind" : "def"}, {"label" : "makeiteratorinfinite", "tail" : "(it: Iterator[A]): InfiniteIterator[A]", "member" : "scala.InfiniteIterator.makeiteratorinfinite", "link" : "scala\/InfiniteIterator$.html#makeiteratorinfinite[A](it:Iterator[A]):InfiniteIterator[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/InfiniteIterator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/InfiniteIterator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/InfiniteIterator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/InfiniteIterator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/InfiniteIterator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/InfiniteIterator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/InfiniteIterator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/InfiniteIterator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/InfiniteIterator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/InfiniteIterator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/InfiniteIterator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/InfiniteIterator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scala\/InfiniteIterator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/InfiniteIterator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/InfiniteIterator$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/InfiniteIterator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/InfiniteIterator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/InfiniteIterator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/InfiniteIterator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "scala\/InfiniteIterator.html", "kind" : "trait", "members_trait" : [{"label" : "GroupedIterator", "tail" : "", "member" : "scala.collection.Iterator.GroupedIterator", "link" : "scala\/InfiniteIterator.html#GroupedIterator[B<:<?>]extendsAbstractIterator[Seq[B]]", "kind" : "class"}, {"label" : "map", "tail" : "(f: (A) => B): InfiniteIterator[B]", "member" : "scala.InfiniteIterator.map", "link" : "scala\/InfiniteIterator.html#map[B](f:A=>B):InfiniteIterator[B]", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "scala.InfiniteIterator.hasNext", "link" : "scala\/InfiniteIterator.html#hasNext:Boolean", "kind" : "def"}, {"label" : "seq", "tail" : "(): InfiniteIterator.this.type", "member" : "scala.collection.Iterator.seq", "link" : "scala\/InfiniteIterator.html#seq:Iterator.this.type", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterator.toString", "link" : "scala\/InfiniteIterator.html#toString():String", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (A) => U): collection.Iterator[A]", "member" : "scala.collection.Iterator.tapEach", "link" : "scala\/InfiniteIterator.html#tapEach[U](f:A=>U):Iterator[A]", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patchElems: collection.Iterator[B], replaced: Int): collection.Iterator[B]", "member" : "scala.collection.Iterator.patch", "link" : "scala\/InfiniteIterator.html#patch[B>:A](from:Int,patchElems:Iterator[B],replaced:Int):Iterator[B]", "kind" : "def"}, {"label" : "duplicate", "tail" : "(): (collection.Iterator[A], collection.Iterator[A])", "member" : "scala.collection.Iterator.duplicate", "link" : "scala\/InfiniteIterator.html#duplicate:(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: collection.IterableOnce[B]): Boolean", "member" : "scala.collection.Iterator.sameElements", "link" : "scala\/InfiniteIterator.html#sameElements[B>:A](that:scala.collection.IterableOnce[B]):Boolean", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): collection.Iterator[(A, Int)]", "member" : "scala.collection.Iterator.zipWithIndex", "link" : "scala\/InfiniteIterator.html#zipWithIndex:Iterator[(A,Int)]", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: collection.IterableOnce[B], thisElem: A1, thatElem: B): collection.Iterator[(A1, B)]", "member" : "scala.collection.Iterator.zipAll", "link" : "scala\/InfiniteIterator.html#zipAll[A1>:A,B](that:scala.collection.IterableOnce[B],thisElem:A1,thatElem:B):Iterator[(A1,B)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: collection.IterableOnce[B]): collection.Iterator[(A, B)]", "member" : "scala.collection.Iterator.zip", "link" : "scala\/InfiniteIterator.html#zip[B](that:scala.collection.IterableOnce[B]):Iterator[(A,B)]", "kind" : "def"}, {"label" : "sliceIterator", "tail" : "(from: Int, until: Int): collection.Iterator[A]", "member" : "scala.collection.Iterator.sliceIterator", "link" : "scala\/InfiniteIterator.html#sliceIterator(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): collection.Iterator[A]", "member" : "scala.collection.Iterator.slice", "link" : "scala\/InfiniteIterator.html#slice(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "span", "tail" : "(p: (A) => Boolean): (collection.Iterator[A], collection.Iterator[A])", "member" : "scala.collection.Iterator.span", "link" : "scala\/InfiniteIterator.html#span(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): collection.Iterator[A]", "member" : "scala.collection.Iterator.dropWhile", "link" : "scala\/InfiniteIterator.html#dropWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): collection.Iterator[A]", "member" : "scala.collection.Iterator.drop", "link" : "scala\/InfiniteIterator.html#drop(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): collection.Iterator[A]", "member" : "scala.collection.Iterator.takeWhile", "link" : "scala\/InfiniteIterator.html#takeWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): collection.Iterator[A]", "member" : "scala.collection.Iterator.take", "link" : "scala\/InfiniteIterator.html#take(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "++", "tail" : "(xs: => collection.IterableOnce[B]): collection.Iterator[B]", "member" : "scala.collection.Iterator.++", "link" : "scala\/InfiniteIterator.html#++[B>:A](xs:=>scala.collection.IterableOnce[B]):Iterator[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(xs: => collection.IterableOnce[B]): collection.Iterator[B]", "member" : "scala.collection.Iterator.concat", "link" : "scala\/InfiniteIterator.html#concat[B>:A](xs:=>scala.collection.IterableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: (A) => collection.IterableOnce[B]): collection.Iterator[B]", "member" : "scala.collection.Iterator.flatten", "link" : "scala\/InfiniteIterator.html#flatten[B](implicitev:A=>scala.collection.IterableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => collection.IterableOnce[B]): collection.Iterator[B]", "member" : "scala.collection.Iterator.flatMap", "link" : "scala\/InfiniteIterator.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "distinctBy", "tail" : "(f: (A) => B): collection.Iterator[A]", "member" : "scala.collection.Iterator.distinctBy", "link" : "scala\/InfiniteIterator.html#distinctBy[B](f:A=>B):Iterator[A]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): collection.Iterator[A]", "member" : "scala.collection.Iterator.distinct", "link" : "scala\/InfiniteIterator.html#distinct:Iterator[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): collection.Iterator[B]", "member" : "scala.collection.Iterator.collect", "link" : "scala\/InfiniteIterator.html#collect[B](pf:PartialFunction[A,B]):Iterator[B]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): collection.Iterator[A]", "member" : "scala.collection.Iterator.withFilter", "link" : "scala\/InfiniteIterator.html#withFilter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (A) => Boolean): collection.Iterator[A]", "member" : "scala.collection.Iterator.filterNot", "link" : "scala\/InfiniteIterator.html#filterNot(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): collection.Iterator[A]", "member" : "scala.collection.Iterator.filter", "link" : "scala\/InfiniteIterator.html#filter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isEmpty", "link" : "scala\/InfiniteIterator.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.Iterator.length", "link" : "scala\/InfiniteIterator.html#length:Int", "kind" : "final def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "scala\/InfiniteIterator.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "scala\/InfiniteIterator.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (A) => Boolean, from: Int): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "scala\/InfiniteIterator.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (A, B) => B): collection.Iterator[B]", "member" : "scala.collection.Iterator.scanRight", "link" : "scala\/InfiniteIterator.html#scanRight[B](z:B)(op:(A,B)=>B):Iterator[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, A) => B): collection.Iterator[B]", "member" : "scala.collection.Iterator.scanLeft", "link" : "scala\/InfiniteIterator.html#scanLeft[B](z:B)(op:(B,A)=>B):Iterator[B]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.sliding", "link" : "scala\/InfiniteIterator.html#sliding[B>:A](size:Int,step:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.grouped", "link" : "scala\/InfiniteIterator.html#grouped[B>:A](size:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (A) => Boolean): (collection.Iterator[A], collection.Iterator[A])", "member" : "scala.collection.Iterator.partition", "link" : "scala\/InfiniteIterator.html#partition(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: B): collection.Iterator[B]", "member" : "scala.collection.Iterator.padTo", "link" : "scala\/InfiniteIterator.html#padTo[B>:A](len:Int,elem:B):Iterator[B]", "kind" : "def"}, {"label" : "buffered", "tail" : "(): collection.BufferedIterator[A]", "member" : "scala.collection.Iterator.buffered", "link" : "scala\/InfiniteIterator.html#buffered:scala.collection.BufferedIterator[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: Any): Boolean", "member" : "scala.collection.Iterator.contains", "link" : "scala\/InfiniteIterator.html#contains(elem:Any):Boolean", "kind" : "def"}, {"label" : "nextOption", "tail" : "(): Option[A]", "member" : "scala.collection.Iterator.nextOption", "link" : "scala\/InfiniteIterator.html#nextOption():Option[A]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): collection.Iterator[A]", "member" : "scala.collection.Iterator.iterator", "link" : "scala\/InfiniteIterator.html#iterator:Iterator[A]", "kind" : "final def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.hasDefiniteSize", "link" : "scala\/InfiniteIterator.html#hasDefiniteSize:Boolean", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "scala\/InfiniteIterator.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "scala\/InfiniteIterator.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "scala\/InfiniteIterator.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): collection.immutable.Stream[A]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "scala\/InfiniteIterator.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): collection.immutable.IndexedSeq[A]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "scala\/InfiniteIterator.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): collection.immutable.Seq[A]", "member" : "scala.collection.IterableOnceOps.toSeq", "link" : "scala\/InfiniteIterator.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "scala\/InfiniteIterator.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[A, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "scala\/InfiniteIterator.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): collection.immutable.Vector[A]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "scala\/InfiniteIterator.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): collection.immutable.List[A]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "scala\/InfiniteIterator.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): collection.Iterator[A]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "scala\/InfiniteIterator.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[A, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "scala\/InfiniteIterator.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/InfiniteIterator.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, sep: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/InfiniteIterator.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, start: String, sep: String, end: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/InfiniteIterator.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/InfiniteIterator.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/InfiniteIterator.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/InfiniteIterator.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: collection.IterableOnce[B])(p: (A, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "scala\/InfiniteIterator.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, A) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "scala\/InfiniteIterator.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[A, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "scala\/InfiniteIterator.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "scala\/InfiniteIterator.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "scala\/InfiniteIterator.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "scala\/InfiniteIterator.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "scala\/InfiniteIterator.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "scala\/InfiniteIterator.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.max", "link" : "scala\/InfiniteIterator.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "scala\/InfiniteIterator.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.min", "link" : "scala\/InfiniteIterator.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "scala\/InfiniteIterator.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "scala\/InfiniteIterator.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/InfiniteIterator.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/InfiniteIterator.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/InfiniteIterator.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "scala\/InfiniteIterator.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.IterableOnceOps.size", "link" : "scala\/InfiniteIterator.html#size:Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "scala\/InfiniteIterator.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (A, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "scala\/InfiniteIterator.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, A) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "scala\/InfiniteIterator.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "scala\/InfiniteIterator.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "scala\/InfiniteIterator.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "scala\/InfiniteIterator.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "scala\/InfiniteIterator.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "scala\/InfiniteIterator.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "scala\/InfiniteIterator.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "scala\/InfiniteIterator.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "scala\/InfiniteIterator.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "scala\/InfiniteIterator.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Option[A]", "member" : "scala.collection.IterableOnceOps.find", "link" : "scala\/InfiniteIterator.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (A) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "scala\/InfiniteIterator.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "scala\/InfiniteIterator.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "scala\/InfiniteIterator.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "scala\/InfiniteIterator.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.isTraversableAgain", "link" : "scala\/InfiniteIterator.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (collection.Iterator[A], collection.Iterator[A])", "member" : "scala.collection.IterableOnceOps.splitAt", "link" : "scala\/InfiniteIterator.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "scala\/InfiniteIterator.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[A, S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "scala\/InfiniteIterator.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/InfiniteIterator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/InfiniteIterator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/InfiniteIterator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/InfiniteIterator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/InfiniteIterator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/InfiniteIterator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/InfiniteIterator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/InfiniteIterator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/InfiniteIterator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/InfiniteIterator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/InfiniteIterator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/InfiniteIterator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/InfiniteIterator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/InfiniteIterator.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/InfiniteIterator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/InfiniteIterator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/InfiniteIterator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/InfiniteIterator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "next", "tail" : "(): A", "member" : "scala.collection.Iterator.next", "link" : "scala\/InfiniteIterator.html#next():A", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "scala.Rational", "shortDescription" : "", "object" : "scala\/Rational$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "scala.Rational.toString", "link" : "scala\/Rational.html#toString():String", "kind" : "def"}, {"label" : "compare", "tail" : "(that: Rational): Int", "member" : "scala.Rational.compare", "link" : "scala\/Rational.html#compare(that:Rational):Int", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Rational.hashCode", "link" : "scala\/Rational.html#hashCode():Int", "kind" : "def"}, {"label" : "canEqual", "tail" : "(other: Any): Boolean", "member" : "scala.Rational.canEqual", "link" : "scala\/Rational.html#canEqual(other:Any):Boolean", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "scala.Rational.equals", "link" : "scala\/Rational.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "mod1", "tail" : "(): Rational", "member" : "scala.Rational.mod1", "link" : "scala\/Rational.html#mod1:Rational", "kind" : "def"}, {"label" : "\/", "tail" : "(i: Int): Rational", "member" : "scala.Rational.\/", "link" : "scala\/Rational.html#\/(i:Int):Rational", "kind" : "def"}, {"label" : "\/", "tail" : "(that: Rational): Rational", "member" : "scala.Rational.\/", "link" : "scala\/Rational.html#\/(that:Rational):Rational", "kind" : "def"}, {"label" : "*", "tail" : "(i: Int): Rational", "member" : "scala.Rational.*", "link" : "scala\/Rational.html#*(i:Int):Rational", "kind" : "def"}, {"label" : "*", "tail" : "(that: Rational): Rational", "member" : "scala.Rational.*", "link" : "scala\/Rational.html#*(that:Rational):Rational", "kind" : "def"}, {"label" : "-", "tail" : "(i: Int): Rational", "member" : "scala.Rational.-", "link" : "scala\/Rational.html#-(i:Int):Rational", "kind" : "def"}, {"label" : "-", "tail" : "(that: Rational): Rational", "member" : "scala.Rational.-", "link" : "scala\/Rational.html#-(that:Rational):Rational", "kind" : "def"}, {"label" : "+", "tail" : "(that: Rational): Rational", "member" : "scala.Rational.+", "link" : "scala\/Rational.html#+(that:Rational):Rational", "kind" : "def"}, {"member" : "scala.Rational#<init>", "error" : "unsupported entity"}, {"member" : "scala.Rational#<init>", "error" : "unsupported entity"}, {"member" : "scala.Rational#<init>", "error" : "unsupported entity"}, {"label" : "compareTo", "tail" : "(that: Rational): Int", "member" : "scala.math.Ordered.compareTo", "link" : "scala\/Rational.html#compareTo(that:A):Int", "kind" : "def"}, {"label" : ">=", "tail" : "(that: Rational): Boolean", "member" : "scala.math.Ordered.>=", "link" : "scala\/Rational.html#>=(that:A):Boolean", "kind" : "def"}, {"label" : "<=", "tail" : "(that: Rational): Boolean", "member" : "scala.math.Ordered.<=", "link" : "scala\/Rational.html#<=(that:A):Boolean", "kind" : "def"}, {"label" : ">", "tail" : "(that: Rational): Boolean", "member" : "scala.math.Ordered.>", "link" : "scala\/Rational.html#>(that:A):Boolean", "kind" : "def"}, {"label" : "<", "tail" : "(that: Rational): Boolean", "member" : "scala.math.Ordered.<", "link" : "scala\/Rational.html#<(that:A):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/Rational.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/Rational.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/Rational.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/Rational.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/Rational.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/Rational.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/Rational.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/Rational.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/Rational.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/Rational.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/Rational.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/Rational.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/Rational.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/Rational.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/Rational.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/Rational.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "intervalOneZeroIterator", "tail" : "(): collection.Iterator[Rational]", "member" : "scala.Rational.intervalOneZeroIterator", "link" : "scala\/Rational$.html#intervalOneZeroIterator:Iterator[Rational]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): collection.Iterator[Rational]", "member" : "scala.Rational.iterator", "link" : "scala\/Rational$.html#iterator:Iterator[Rational]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/Rational$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/Rational$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/Rational$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/Rational$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/Rational$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/Rational$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/Rational$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/Rational$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/Rational$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/Rational$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/Rational$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/Rational$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scala\/Rational$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/Rational$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/Rational$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/Rational$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/Rational$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/Rational$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/Rational$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scala\/Rational.html", "kind" : "class"}], "scala.group" : [{"name" : "scala.group.Bijection", "trait" : "scala\/group\/Bijection.html", "kind" : "trait", "members_trait" : [{"label" : "inverse", "tail" : ": Bijection[B, A]", "member" : "scala.group.Bijection.inverse", "link" : "scala\/group\/Bijection.html#inverse:scala.group.Bijection[B,A]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/Bijection.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/Bijection.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/Bijection.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/Bijection.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/Bijection.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/Bijection.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/Bijection.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/Bijection.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/Bijection.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/Bijection.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/Bijection.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/Bijection.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scala\/group\/Bijection.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/Bijection.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/Bijection.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/Bijection.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/Bijection.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/Bijection.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/Bijection.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toA", "tail" : "(y: B): A", "member" : "scala.group.Bijection.toA", "link" : "scala\/group\/Bijection.html#toA(y:B):A", "kind" : "abstract def"}, {"label" : "toB", "tail" : "(x: A): B", "member" : "scala.group.Bijection.toB", "link" : "scala\/group\/Bijection.html#toB(x:A):B", "kind" : "abstract def"}, {"label" : "BIsDefined", "tail" : "(y: B): Boolean", "member" : "scala.group.Bijection.BIsDefined", "link" : "scala\/group\/Bijection.html#BIsDefined(y:B):Boolean", "kind" : "abstract def"}, {"label" : "AIsDefined", "tail" : "(x: A): Boolean", "member" : "scala.group.Bijection.AIsDefined", "link" : "scala\/group\/Bijection.html#AIsDefined(x:A):Boolean", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "scala.group.Cross", "shortDescription" : "", "members_class" : [{"label" : "Subgroup", "tail" : "", "member" : "scala.group.Group.Subgroup", "link" : "scala\/group\/Group.html#SubgroupextendsGroup[A]withSet[A]", "kind" : "trait"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.group.Cross.toString", "link" : "scala\/group\/Cross.html#toString():String", "kind" : "def"}, {"label" : "contains", "tail" : "(x: (A, B)): Boolean", "member" : "scala.group.Cross.contains", "link" : "scala\/group\/Cross.html#contains(x:(A,B)):Boolean", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[(A, B)]", "member" : "scala.group.Cross.iterator", "link" : "scala\/group\/Cross.html#iterator:Iterator[(A,B)]", "kind" : "def"}, {"label" : "op", "tail" : "(x: (A, B), y: (A, B)): (A, B)", "member" : "scala.group.Cross.op", "link" : "scala\/group\/Cross.html#op(x:(A,B),y:(A,B)):(A,B)", "kind" : "def"}, {"label" : "inv", "tail" : "(x: (A, B)): (A, B)", "member" : "scala.group.Cross.inv", "link" : "scala\/group\/Cross.html#inv(x:(A,B)):(A,B)", "kind" : "def"}, {"label" : "id", "tail" : ": (A, B)", "member" : "scala.group.Cross.id", "link" : "scala\/group\/Cross.html#id:(A,B)", "kind" : "val"}, {"label" : "finite", "tail" : ": Boolean", "member" : "scala.group.Cross.finite", "link" : "scala\/group\/Cross.html#finite:Boolean", "kind" : "val"}, {"member" : "scala.group.Cross#<init>", "error" : "unsupported entity"}, {"label" : "biject", "tail" : "(bi: Bijection[(A, B), B]): Group[B]", "member" : "scala.group.Group.biject", "link" : "scala\/group\/Cross.html#biject[B](bi:scala.group.Bijection[A,B]):scala.group.Group[B]", "kind" : "def"}, {"label" : "order", "tail" : "(x: (A, B)): Int", "member" : "scala.group.Group.order", "link" : "scala\/group\/Cross.html#order(x:A):Int", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: collection.Iterable[B]): LazyZip2[(A, B), B, Cross.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "scala\/group\/Cross.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.Iterable.stringPrefix", "link" : "scala\/group\/Cross.html#stringPrefix:String", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "scala\/group\/Cross.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): Cross.this.type", "member" : "scala.collection.Iterable.seq", "link" : "scala\/group\/Cross.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "iterableFactory", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.Iterable.iterableFactory", "link" : "scala\/group\/Cross.html#iterableFactory:scala.collection.IterableFactory[Iterable]", "kind" : "def"}, {"label" : "coll", "tail" : "(): Cross.this.type", "member" : "scala.collection.Iterable.coll", "link" : "scala\/group\/Cross.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): Cross.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "scala\/group\/Cross.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableFactoryDefaults.empty", "link" : "scala\/group\/Cross.html#empty:CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[(A, B), collection.Iterable[(A, B)]]", "member" : "scala.collection.IterableFactoryDefaults.newSpecificBuilder", "link" : "scala\/group\/Cross.html#newSpecificBuilder:scala.collection.mutable.Builder[A@scala.annotation.unchecked.uncheckedVariance,CC[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: collection.IterableOnce[(A, B)]): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableFactoryDefaults.fromSpecific", "link" : "scala\/group\/Cross.html#fromSpecific(coll:scala.collection.IterableOnce[A@scala.annotation.unchecked.uncheckedVariance]):CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "++:", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++:", "link" : "scala\/group\/Cross.html#++:[B>:A](that:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: ((A, B)) => U): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.tapEach", "link" : "scala\/group\/Cross.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "inits", "tail" : "(): collection.Iterator[collection.Iterable[(A, B)]]", "member" : "scala.collection.IterableOps.inits", "link" : "scala\/group\/Cross.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): collection.Iterator[collection.Iterable[(A, B)]]", "member" : "scala.collection.IterableOps.tails", "link" : "scala\/group\/Cross.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: ((A, B)) => (A1, A2, A3)): (collection.Iterable[A1], collection.Iterable[A2], collection.Iterable[A3])", "member" : "scala.collection.IterableOps.unzip3", "link" : "scala\/group\/Cross.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: ((A, B)) => (A1, A2)): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.unzip", "link" : "scala\/group\/Cross.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: collection.Iterable[B], thisElem: A1, thatElem: B): collection.Iterable[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "scala\/group\/Cross.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): collection.Iterable[((A, B), Int)]", "member" : "scala.collection.IterableOps.zipWithIndex", "link" : "scala\/group\/Cross.html#zipWithIndex:CC[(A@scala.annotation.unchecked.uncheckedVariance,Int)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[((A, B), B)]", "member" : "scala.collection.IterableOps.zip", "link" : "scala\/group\/Cross.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++", "link" : "scala\/group\/Cross.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.concat", "link" : "scala\/group\/Cross.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(f: ((A, B)) => Either[A1, A2]): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.partitionMap", "link" : "scala\/group\/Cross.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[(A, B), B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.collect", "link" : "scala\/group\/Cross.html#collect[B](pf:PartialFunction[A,B]):CC[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asIterable: ((A, B)) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatten", "link" : "scala\/group\/Cross.html#flatten[B](implicitasIterable:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((A, B)) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatMap", "link" : "scala\/group\/Cross.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((A, B)) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.map", "link" : "scala\/group\/Cross.html#map[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: ((A, B), B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "scala\/group\/Cross.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, (A, B)) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanLeft", "link" : "scala\/group\/Cross.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scan", "link" : "scala\/group\/Cross.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: ((A, B)) => K)(f: ((A, B)) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "scala\/group\/Cross.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: ((A, B)) => K)(f: ((A, B)) => B): Map[K, collection.Iterable[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "scala\/group\/Cross.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((A, B)) => K): Map[K, collection.Iterable[(A, B)]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "scala\/group\/Cross.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.slice", "link" : "scala\/group\/Cross.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "init", "tail" : "(): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.init", "link" : "scala\/group\/Cross.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.tail", "link" : "scala\/group\/Cross.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): collection.Iterator[collection.Iterable[(A, B)]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/Cross.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): collection.Iterator[collection.Iterable[(A, B)]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/Cross.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): collection.Iterator[collection.Iterable[(A, B)]]", "member" : "scala.collection.IterableOps.grouped", "link" : "scala\/group\/Cross.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: ((A, B)) => Boolean): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "scala\/group\/Cross.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.dropRight", "link" : "scala\/group\/Cross.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.drop", "link" : "scala\/group\/Cross.html#drop(n:Int):C", "kind" : "def"}, {"label" : "span", "tail" : "(p: ((A, B)) => Boolean): (collection.Iterable[(A, B)], collection.Iterable[(A, B)])", "member" : "scala.collection.IterableOps.span", "link" : "scala\/group\/Cross.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: ((A, B)) => Boolean): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "scala\/group\/Cross.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.takeRight", "link" : "scala\/group\/Cross.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.take", "link" : "scala\/group\/Cross.html#take(n:Int):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (collection.Iterable[(A, B)], collection.Iterable[(A, B)])", "member" : "scala.collection.IterableOps.splitAt", "link" : "scala\/group\/Cross.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: ((A, B)) => Boolean): (collection.Iterable[(A, B)], collection.Iterable[(A, B)])", "member" : "scala.collection.IterableOps.partition", "link" : "scala\/group\/Cross.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: ((A, B)) => Boolean): WithFilter[(A, B), collection.Iterable]", "member" : "scala.collection.IterableOps.withFilter", "link" : "scala\/group\/Cross.html#withFilter(p:A=>Boolean):scala.collection.WithFilter[A,CC]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: ((A, B)) => Boolean): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.filterNot", "link" : "scala\/group\/Cross.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: ((A, B)) => Boolean): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.filter", "link" : "scala\/group\/Cross.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: ((A, B)) => collection.Iterable[B]): collection.Iterable[collection.Iterable[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "scala\/group\/Cross.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): View[(A, B)]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/Cross.html#view(from:Int,until:Int):scala.collection.View[A]", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(that: collection.Iterable[_]): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/Cross.html#sizeCompare(that:Iterable[_]):Int", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "scala\/group\/Cross.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/Cross.html#sizeCompare(otherSize:Int):Int", "kind" : "def"}, {"label" : "view", "tail" : "(): View[(A, B)]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/Cross.html#view:scala.collection.View[A]", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[(A, B)]", "member" : "scala.collection.IterableOps.lastOption", "link" : "scala\/group\/Cross.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): (A, B)", "member" : "scala.collection.IterableOps.last", "link" : "scala\/group\/Cross.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[(A, B)]", "member" : "scala.collection.IterableOps.headOption", "link" : "scala\/group\/Cross.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): (A, B)", "member" : "scala.collection.IterableOps.head", "link" : "scala\/group\/Cross.html#head:A", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.IterableOps.companion", "link" : "scala\/group\/Cross.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.repr", "link" : "scala\/group\/Cross.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "scala\/group\/Cross.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): collection.Traversable[(A, B)]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "scala\/group\/Cross.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "scala\/group\/Cross.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "scala\/group\/Cross.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "scala\/group\/Cross.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): collection.immutable.Stream[(A, B)]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "scala\/group\/Cross.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): collection.immutable.IndexedSeq[(A, B)]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "scala\/group\/Cross.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): collection.immutable.Seq[(A, B)]", "member" : "scala.collection.IterableOnceOps.toSeq", "link" : "scala\/group\/Cross.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "scala\/group\/Cross.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[(A, B), (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "scala\/group\/Cross.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): collection.immutable.Vector[(A, B)]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "scala\/group\/Cross.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): collection.immutable.List[(A, B)]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "scala\/group\/Cross.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): collection.Iterator[(A, B)]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "scala\/group\/Cross.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[(A, B), C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "scala\/group\/Cross.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/Cross.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, sep: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/Cross.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, start: String, sep: String, end: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/Cross.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/Cross.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/Cross.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/Cross.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: collection.IterableOnce[B])(p: ((A, B), B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "scala\/group\/Cross.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, (A, B)) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "scala\/group\/Cross.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[(A, B), B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "scala\/group\/Cross.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: ((A, B)) => B)(cmp: math.Ordering[B]): Option[(A, B)]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "scala\/group\/Cross.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: ((A, B)) => B)(cmp: math.Ordering[B]): (A, B)", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "scala\/group\/Cross.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: ((A, B)) => B)(cmp: math.Ordering[B]): Option[(A, B)]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "scala\/group\/Cross.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: ((A, B)) => B)(cmp: math.Ordering[B]): (A, B)", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "scala\/group\/Cross.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: math.Ordering[B]): Option[(A, B)]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "scala\/group\/Cross.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: math.Ordering[B]): (A, B)", "member" : "scala.collection.IterableOnceOps.max", "link" : "scala\/group\/Cross.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: math.Ordering[B]): Option[(A, B)]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "scala\/group\/Cross.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: math.Ordering[B]): (A, B)", "member" : "scala.collection.IterableOnceOps.min", "link" : "scala\/group\/Cross.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "scala\/group\/Cross.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "scala\/group\/Cross.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/Cross.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/Cross.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/Cross.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "scala\/group\/Cross.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.IterableOnceOps.size", "link" : "scala\/group\/Cross.html#size:Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "scala\/group\/Cross.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.isEmpty", "link" : "scala\/group\/Cross.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: ((A, B), B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "scala\/group\/Cross.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, (A, B)) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "scala\/group\/Cross.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: ((A, B), B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "scala\/group\/Cross.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, (A, B)) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "scala\/group\/Cross.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "scala\/group\/Cross.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "scala\/group\/Cross.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "scala\/group\/Cross.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: ((A, B), B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "scala\/group\/Cross.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, (A, B)) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "scala\/group\/Cross.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: ((A, B), B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "scala\/group\/Cross.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, (A, B)) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "scala\/group\/Cross.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: ((A, B)) => Boolean): Option[(A, B)]", "member" : "scala.collection.IterableOnceOps.find", "link" : "scala\/group\/Cross.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: ((A, B)) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "scala\/group\/Cross.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: ((A, B)) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "scala\/group\/Cross.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: ((A, B)) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "scala\/group\/Cross.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((A, B)) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "scala\/group\/Cross.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "scala\/group\/Cross.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "scala\/group\/Cross.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[(A, B), S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "scala\/group\/Cross.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/Cross.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/Cross.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/Cross.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/Cross.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/Cross.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/Cross.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/Cross.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/Cross.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/Cross.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/Cross.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/Cross.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/Cross.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/Cross.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/Cross.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/Cross.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/Cross.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/Cross.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/Cross.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scala\/group\/Cross.html", "kind" : "class"}, {"name" : "scala.group.FiniteGroup", "trait" : "scala\/group\/FiniteGroup.html", "kind" : "trait", "members_trait" : [{"label" : "Subgroup", "tail" : "", "member" : "scala.group.FiniteGroup.Subgroup", "link" : "scala\/group\/FiniteGroup.html#SubgroupextendsFiniteGroup[A]withFiniteGroup.this.Subgroup", "kind" : "trait"}, {"label" : "subgroups", "tail" : ": Seq[Group[A]]", "member" : "scala.group.FiniteGroup.subgroups", "link" : "scala\/group\/FiniteGroup.html#subgroups:Seq[scala.group.Group[A]]", "kind" : "lazy val"}, {"label" : "printSubgroupTable", "tail" : "(): Unit", "member" : "scala.group.FiniteGroup.printSubgroupTable", "link" : "scala\/group\/FiniteGroup.html#printSubgroupTable:Unit", "kind" : "def"}, {"label" : "printCayleyTable", "tail" : "(): Unit", "member" : "scala.group.FiniteGroup.printCayleyTable", "link" : "scala\/group\/FiniteGroup.html#printCayleyTable:Unit", "kind" : "def"}, {"label" : "printOrders", "tail" : "(): Unit", "member" : "scala.group.FiniteGroup.printOrders", "link" : "scala\/group\/FiniteGroup.html#printOrders:Unit", "kind" : "def"}, {"label" : "contains", "tail" : "(x: A): Boolean", "member" : "scala.group.FiniteGroup.contains", "link" : "scala\/group\/FiniteGroup.html#contains(x:A):Boolean", "kind" : "def"}, {"label" : "size", "tail" : ": Int", "member" : "scala.group.FiniteGroup.size", "link" : "scala\/group\/FiniteGroup.html#size:Int", "kind" : "lazy val"}, {"label" : "finite", "tail" : ": Boolean(true)", "member" : "scala.group.FiniteGroup.finite", "link" : "scala\/group\/FiniteGroup.html#finite:Boolean(true)", "kind" : "final val"}, {"label" : "biject", "tail" : "(bi: Bijection[A, B]): Group[B]", "member" : "scala.group.Group.biject", "link" : "scala\/group\/FiniteGroup.html#biject[B](bi:scala.group.Bijection[A,B]):scala.group.Group[B]", "kind" : "def"}, {"label" : "order", "tail" : "(x: A): Int", "member" : "scala.group.Group.order", "link" : "scala\/group\/FiniteGroup.html#order(x:A):Int", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: collection.Iterable[B]): LazyZip2[A, B, FiniteGroup.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "scala\/group\/FiniteGroup.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterable.toString", "link" : "scala\/group\/FiniteGroup.html#toString():String", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.Iterable.stringPrefix", "link" : "scala\/group\/FiniteGroup.html#stringPrefix:String", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "scala\/group\/FiniteGroup.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): FiniteGroup.this.type", "member" : "scala.collection.Iterable.seq", "link" : "scala\/group\/FiniteGroup.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "iterableFactory", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.Iterable.iterableFactory", "link" : "scala\/group\/FiniteGroup.html#iterableFactory:scala.collection.IterableFactory[Iterable]", "kind" : "def"}, {"label" : "coll", "tail" : "(): FiniteGroup.this.type", "member" : "scala.collection.Iterable.coll", "link" : "scala\/group\/FiniteGroup.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): FiniteGroup.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "scala\/group\/FiniteGroup.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableFactoryDefaults.empty", "link" : "scala\/group\/FiniteGroup.html#empty:CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[A, collection.Iterable[A]]", "member" : "scala.collection.IterableFactoryDefaults.newSpecificBuilder", "link" : "scala\/group\/FiniteGroup.html#newSpecificBuilder:scala.collection.mutable.Builder[A@scala.annotation.unchecked.uncheckedVariance,CC[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: collection.IterableOnce[A]): collection.Iterable[A]", "member" : "scala.collection.IterableFactoryDefaults.fromSpecific", "link" : "scala\/group\/FiniteGroup.html#fromSpecific(coll:scala.collection.IterableOnce[A@scala.annotation.unchecked.uncheckedVariance]):CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "++:", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++:", "link" : "scala\/group\/FiniteGroup.html#++:[B>:A](that:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (A) => U): collection.Iterable[A]", "member" : "scala.collection.IterableOps.tapEach", "link" : "scala\/group\/FiniteGroup.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "inits", "tail" : "(): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.inits", "link" : "scala\/group\/FiniteGroup.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.tails", "link" : "scala\/group\/FiniteGroup.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (A) => (A1, A2, A3)): (collection.Iterable[A1], collection.Iterable[A2], collection.Iterable[A3])", "member" : "scala.collection.IterableOps.unzip3", "link" : "scala\/group\/FiniteGroup.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (A) => (A1, A2)): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.unzip", "link" : "scala\/group\/FiniteGroup.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: collection.Iterable[B], thisElem: A1, thatElem: B): collection.Iterable[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "scala\/group\/FiniteGroup.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): collection.Iterable[(A, Int)]", "member" : "scala.collection.IterableOps.zipWithIndex", "link" : "scala\/group\/FiniteGroup.html#zipWithIndex:CC[(A@scala.annotation.unchecked.uncheckedVariance,Int)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.zip", "link" : "scala\/group\/FiniteGroup.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++", "link" : "scala\/group\/FiniteGroup.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.concat", "link" : "scala\/group\/FiniteGroup.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(f: (A) => Either[A1, A2]): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.partitionMap", "link" : "scala\/group\/FiniteGroup.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.collect", "link" : "scala\/group\/FiniteGroup.html#collect[B](pf:PartialFunction[A,B]):CC[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asIterable: (A) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatten", "link" : "scala\/group\/FiniteGroup.html#flatten[B](implicitasIterable:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatMap", "link" : "scala\/group\/FiniteGroup.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.map", "link" : "scala\/group\/FiniteGroup.html#map[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (A, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "scala\/group\/FiniteGroup.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, A) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanLeft", "link" : "scala\/group\/FiniteGroup.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scan", "link" : "scala\/group\/FiniteGroup.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: (A) => K)(f: (A) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "scala\/group\/FiniteGroup.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: (A) => K)(f: (A) => B): Map[K, collection.Iterable[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "scala\/group\/FiniteGroup.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (A) => K): Map[K, collection.Iterable[A]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "scala\/group\/FiniteGroup.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.slice", "link" : "scala\/group\/FiniteGroup.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "init", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOps.init", "link" : "scala\/group\/FiniteGroup.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOps.tail", "link" : "scala\/group\/FiniteGroup.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/FiniteGroup.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/FiniteGroup.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.grouped", "link" : "scala\/group\/FiniteGroup.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): collection.Iterable[A]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "scala\/group\/FiniteGroup.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.dropRight", "link" : "scala\/group\/FiniteGroup.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.drop", "link" : "scala\/group\/FiniteGroup.html#drop(n:Int):C", "kind" : "def"}, {"label" : "span", "tail" : "(p: (A) => Boolean): (collection.Iterable[A], collection.Iterable[A])", "member" : "scala.collection.IterableOps.span", "link" : "scala\/group\/FiniteGroup.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): collection.Iterable[A]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "scala\/group\/FiniteGroup.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.takeRight", "link" : "scala\/group\/FiniteGroup.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.take", "link" : "scala\/group\/FiniteGroup.html#take(n:Int):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (collection.Iterable[A], collection.Iterable[A])", "member" : "scala.collection.IterableOps.splitAt", "link" : "scala\/group\/FiniteGroup.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (A) => Boolean): (collection.Iterable[A], collection.Iterable[A])", "member" : "scala.collection.IterableOps.partition", "link" : "scala\/group\/FiniteGroup.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): WithFilter[A, collection.Iterable]", "member" : "scala.collection.IterableOps.withFilter", "link" : "scala\/group\/FiniteGroup.html#withFilter(p:A=>Boolean):scala.collection.WithFilter[A,CC]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (A) => Boolean): collection.Iterable[A]", "member" : "scala.collection.IterableOps.filterNot", "link" : "scala\/group\/FiniteGroup.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (A) => Boolean): collection.Iterable[A]", "member" : "scala.collection.IterableOps.filter", "link" : "scala\/group\/FiniteGroup.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: (A) => collection.Iterable[B]): collection.Iterable[collection.Iterable[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "scala\/group\/FiniteGroup.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): View[A]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/FiniteGroup.html#view(from:Int,until:Int):scala.collection.View[A]", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(that: collection.Iterable[_]): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/FiniteGroup.html#sizeCompare(that:Iterable[_]):Int", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "scala\/group\/FiniteGroup.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/FiniteGroup.html#sizeCompare(otherSize:Int):Int", "kind" : "def"}, {"label" : "view", "tail" : "(): View[A]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/FiniteGroup.html#view:scala.collection.View[A]", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[A]", "member" : "scala.collection.IterableOps.lastOption", "link" : "scala\/group\/FiniteGroup.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): A", "member" : "scala.collection.IterableOps.last", "link" : "scala\/group\/FiniteGroup.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[A]", "member" : "scala.collection.IterableOps.headOption", "link" : "scala\/group\/FiniteGroup.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): A", "member" : "scala.collection.IterableOps.head", "link" : "scala\/group\/FiniteGroup.html#head:A", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.IterableOps.companion", "link" : "scala\/group\/FiniteGroup.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOps.repr", "link" : "scala\/group\/FiniteGroup.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "scala\/group\/FiniteGroup.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): collection.Traversable[A]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "scala\/group\/FiniteGroup.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "scala\/group\/FiniteGroup.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "scala\/group\/FiniteGroup.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "scala\/group\/FiniteGroup.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): collection.immutable.Stream[A]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "scala\/group\/FiniteGroup.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): collection.immutable.IndexedSeq[A]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "scala\/group\/FiniteGroup.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): collection.immutable.Seq[A]", "member" : "scala.collection.IterableOnceOps.toSeq", "link" : "scala\/group\/FiniteGroup.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "scala\/group\/FiniteGroup.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[A, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "scala\/group\/FiniteGroup.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): collection.immutable.Vector[A]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "scala\/group\/FiniteGroup.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): collection.immutable.List[A]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "scala\/group\/FiniteGroup.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): collection.Iterator[A]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "scala\/group\/FiniteGroup.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[A, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "scala\/group\/FiniteGroup.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/FiniteGroup.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, sep: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/FiniteGroup.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, start: String, sep: String, end: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/FiniteGroup.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/FiniteGroup.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/FiniteGroup.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/FiniteGroup.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: collection.IterableOnce[B])(p: (A, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "scala\/group\/FiniteGroup.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, A) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "scala\/group\/FiniteGroup.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[A, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "scala\/group\/FiniteGroup.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "scala\/group\/FiniteGroup.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "scala\/group\/FiniteGroup.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "scala\/group\/FiniteGroup.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "scala\/group\/FiniteGroup.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "scala\/group\/FiniteGroup.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.max", "link" : "scala\/group\/FiniteGroup.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "scala\/group\/FiniteGroup.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.min", "link" : "scala\/group\/FiniteGroup.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "scala\/group\/FiniteGroup.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "scala\/group\/FiniteGroup.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/FiniteGroup.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/FiniteGroup.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/FiniteGroup.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "scala\/group\/FiniteGroup.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "scala\/group\/FiniteGroup.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.isEmpty", "link" : "scala\/group\/FiniteGroup.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (A, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "scala\/group\/FiniteGroup.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, A) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "scala\/group\/FiniteGroup.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "scala\/group\/FiniteGroup.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "scala\/group\/FiniteGroup.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "scala\/group\/FiniteGroup.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "scala\/group\/FiniteGroup.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "scala\/group\/FiniteGroup.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "scala\/group\/FiniteGroup.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "scala\/group\/FiniteGroup.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "scala\/group\/FiniteGroup.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "scala\/group\/FiniteGroup.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Option[A]", "member" : "scala.collection.IterableOnceOps.find", "link" : "scala\/group\/FiniteGroup.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (A) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "scala\/group\/FiniteGroup.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "scala\/group\/FiniteGroup.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "scala\/group\/FiniteGroup.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "scala\/group\/FiniteGroup.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "scala\/group\/FiniteGroup.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "scala\/group\/FiniteGroup.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[A, S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "scala\/group\/FiniteGroup.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/FiniteGroup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/FiniteGroup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/FiniteGroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/FiniteGroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/FiniteGroup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/FiniteGroup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/FiniteGroup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/FiniteGroup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/FiniteGroup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/FiniteGroup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/FiniteGroup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/FiniteGroup.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/FiniteGroup.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/FiniteGroup.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/FiniteGroup.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/FiniteGroup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/FiniteGroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/FiniteGroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "iterator", "tail" : "(): Iterator[A]", "member" : "scala.group.Group.iterator", "link" : "scala\/group\/FiniteGroup.html#iterator:Iterator[A]", "kind" : "abstract def"}, {"label" : "op", "tail" : "(x: A, y: A): A", "member" : "scala.group.Group.op", "link" : "scala\/group\/FiniteGroup.html#op(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "inv", "tail" : "(x: A): A", "member" : "scala.group.Group.inv", "link" : "scala\/group\/FiniteGroup.html#inv(x:A):A", "kind" : "abstract def"}, {"label" : "id", "tail" : ": A", "member" : "scala.group.Group.id", "link" : "scala\/group\/FiniteGroup.html#id:A", "kind" : "abstract val"}], "shortDescription" : ""}, {"name" : "scala.group.Group", "trait" : "scala\/group\/Group.html", "kind" : "trait", "members_trait" : [{"label" : "Subgroup", "tail" : "", "member" : "scala.group.Group.Subgroup", "link" : "scala\/group\/Group.html#SubgroupextendsGroup[A]withSet[A]", "kind" : "trait"}, {"label" : "biject", "tail" : "(bi: Bijection[A, B]): Group[B]", "member" : "scala.group.Group.biject", "link" : "scala\/group\/Group.html#biject[B](bi:scala.group.Bijection[A,B]):scala.group.Group[B]", "kind" : "def"}, {"label" : "order", "tail" : "(x: A): Int", "member" : "scala.group.Group.order", "link" : "scala\/group\/Group.html#order(x:A):Int", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: collection.Iterable[B]): LazyZip2[A, B, Group.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "scala\/group\/Group.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterable.toString", "link" : "scala\/group\/Group.html#toString():String", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.Iterable.stringPrefix", "link" : "scala\/group\/Group.html#stringPrefix:String", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "scala\/group\/Group.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): Group.this.type", "member" : "scala.collection.Iterable.seq", "link" : "scala\/group\/Group.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "iterableFactory", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.Iterable.iterableFactory", "link" : "scala\/group\/Group.html#iterableFactory:scala.collection.IterableFactory[Iterable]", "kind" : "def"}, {"label" : "coll", "tail" : "(): Group.this.type", "member" : "scala.collection.Iterable.coll", "link" : "scala\/group\/Group.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): Group.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "scala\/group\/Group.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableFactoryDefaults.empty", "link" : "scala\/group\/Group.html#empty:CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[A, collection.Iterable[A]]", "member" : "scala.collection.IterableFactoryDefaults.newSpecificBuilder", "link" : "scala\/group\/Group.html#newSpecificBuilder:scala.collection.mutable.Builder[A@scala.annotation.unchecked.uncheckedVariance,CC[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: collection.IterableOnce[A]): collection.Iterable[A]", "member" : "scala.collection.IterableFactoryDefaults.fromSpecific", "link" : "scala\/group\/Group.html#fromSpecific(coll:scala.collection.IterableOnce[A@scala.annotation.unchecked.uncheckedVariance]):CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "++:", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++:", "link" : "scala\/group\/Group.html#++:[B>:A](that:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (A) => U): collection.Iterable[A]", "member" : "scala.collection.IterableOps.tapEach", "link" : "scala\/group\/Group.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "inits", "tail" : "(): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.inits", "link" : "scala\/group\/Group.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.tails", "link" : "scala\/group\/Group.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (A) => (A1, A2, A3)): (collection.Iterable[A1], collection.Iterable[A2], collection.Iterable[A3])", "member" : "scala.collection.IterableOps.unzip3", "link" : "scala\/group\/Group.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (A) => (A1, A2)): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.unzip", "link" : "scala\/group\/Group.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: collection.Iterable[B], thisElem: A1, thatElem: B): collection.Iterable[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "scala\/group\/Group.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): collection.Iterable[(A, Int)]", "member" : "scala.collection.IterableOps.zipWithIndex", "link" : "scala\/group\/Group.html#zipWithIndex:CC[(A@scala.annotation.unchecked.uncheckedVariance,Int)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.zip", "link" : "scala\/group\/Group.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++", "link" : "scala\/group\/Group.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.concat", "link" : "scala\/group\/Group.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(f: (A) => Either[A1, A2]): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.partitionMap", "link" : "scala\/group\/Group.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.collect", "link" : "scala\/group\/Group.html#collect[B](pf:PartialFunction[A,B]):CC[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asIterable: (A) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatten", "link" : "scala\/group\/Group.html#flatten[B](implicitasIterable:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatMap", "link" : "scala\/group\/Group.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.map", "link" : "scala\/group\/Group.html#map[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (A, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "scala\/group\/Group.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, A) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanLeft", "link" : "scala\/group\/Group.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scan", "link" : "scala\/group\/Group.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: (A) => K)(f: (A) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "scala\/group\/Group.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: (A) => K)(f: (A) => B): Map[K, collection.Iterable[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "scala\/group\/Group.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (A) => K): Map[K, collection.Iterable[A]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "scala\/group\/Group.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.slice", "link" : "scala\/group\/Group.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "init", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOps.init", "link" : "scala\/group\/Group.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOps.tail", "link" : "scala\/group\/Group.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/Group.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/Group.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.grouped", "link" : "scala\/group\/Group.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): collection.Iterable[A]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "scala\/group\/Group.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.dropRight", "link" : "scala\/group\/Group.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.drop", "link" : "scala\/group\/Group.html#drop(n:Int):C", "kind" : "def"}, {"label" : "span", "tail" : "(p: (A) => Boolean): (collection.Iterable[A], collection.Iterable[A])", "member" : "scala.collection.IterableOps.span", "link" : "scala\/group\/Group.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): collection.Iterable[A]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "scala\/group\/Group.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.takeRight", "link" : "scala\/group\/Group.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.take", "link" : "scala\/group\/Group.html#take(n:Int):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (collection.Iterable[A], collection.Iterable[A])", "member" : "scala.collection.IterableOps.splitAt", "link" : "scala\/group\/Group.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (A) => Boolean): (collection.Iterable[A], collection.Iterable[A])", "member" : "scala.collection.IterableOps.partition", "link" : "scala\/group\/Group.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): WithFilter[A, collection.Iterable]", "member" : "scala.collection.IterableOps.withFilter", "link" : "scala\/group\/Group.html#withFilter(p:A=>Boolean):scala.collection.WithFilter[A,CC]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (A) => Boolean): collection.Iterable[A]", "member" : "scala.collection.IterableOps.filterNot", "link" : "scala\/group\/Group.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (A) => Boolean): collection.Iterable[A]", "member" : "scala.collection.IterableOps.filter", "link" : "scala\/group\/Group.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: (A) => collection.Iterable[B]): collection.Iterable[collection.Iterable[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "scala\/group\/Group.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): View[A]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/Group.html#view(from:Int,until:Int):scala.collection.View[A]", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(that: collection.Iterable[_]): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/Group.html#sizeCompare(that:Iterable[_]):Int", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "scala\/group\/Group.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/Group.html#sizeCompare(otherSize:Int):Int", "kind" : "def"}, {"label" : "view", "tail" : "(): View[A]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/Group.html#view:scala.collection.View[A]", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[A]", "member" : "scala.collection.IterableOps.lastOption", "link" : "scala\/group\/Group.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): A", "member" : "scala.collection.IterableOps.last", "link" : "scala\/group\/Group.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[A]", "member" : "scala.collection.IterableOps.headOption", "link" : "scala\/group\/Group.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): A", "member" : "scala.collection.IterableOps.head", "link" : "scala\/group\/Group.html#head:A", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.IterableOps.companion", "link" : "scala\/group\/Group.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOps.repr", "link" : "scala\/group\/Group.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "scala\/group\/Group.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): collection.Traversable[A]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "scala\/group\/Group.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "scala\/group\/Group.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "scala\/group\/Group.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "scala\/group\/Group.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): collection.immutable.Stream[A]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "scala\/group\/Group.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): collection.immutable.IndexedSeq[A]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "scala\/group\/Group.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): collection.immutable.Seq[A]", "member" : "scala.collection.IterableOnceOps.toSeq", "link" : "scala\/group\/Group.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "scala\/group\/Group.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[A, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "scala\/group\/Group.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): collection.immutable.Vector[A]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "scala\/group\/Group.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): collection.immutable.List[A]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "scala\/group\/Group.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): collection.Iterator[A]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "scala\/group\/Group.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[A, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "scala\/group\/Group.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/Group.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, sep: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/Group.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, start: String, sep: String, end: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/Group.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/Group.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/Group.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/Group.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: collection.IterableOnce[B])(p: (A, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "scala\/group\/Group.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, A) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "scala\/group\/Group.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[A, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "scala\/group\/Group.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "scala\/group\/Group.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "scala\/group\/Group.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "scala\/group\/Group.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "scala\/group\/Group.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "scala\/group\/Group.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.max", "link" : "scala\/group\/Group.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "scala\/group\/Group.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.min", "link" : "scala\/group\/Group.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "scala\/group\/Group.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "scala\/group\/Group.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/Group.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/Group.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/Group.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "scala\/group\/Group.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.IterableOnceOps.size", "link" : "scala\/group\/Group.html#size:Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "scala\/group\/Group.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.isEmpty", "link" : "scala\/group\/Group.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (A, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "scala\/group\/Group.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, A) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "scala\/group\/Group.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "scala\/group\/Group.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "scala\/group\/Group.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "scala\/group\/Group.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "scala\/group\/Group.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "scala\/group\/Group.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "scala\/group\/Group.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "scala\/group\/Group.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "scala\/group\/Group.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "scala\/group\/Group.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Option[A]", "member" : "scala.collection.IterableOnceOps.find", "link" : "scala\/group\/Group.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (A) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "scala\/group\/Group.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "scala\/group\/Group.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "scala\/group\/Group.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "scala\/group\/Group.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "scala\/group\/Group.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "scala\/group\/Group.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[A, S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "scala\/group\/Group.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/Group.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/Group.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/Group.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/Group.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/Group.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/Group.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/Group.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/Group.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/Group.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/Group.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/Group.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/Group.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/Group.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/Group.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/Group.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/Group.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/Group.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/Group.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(x: A): Boolean", "member" : "scala.group.Group.contains", "link" : "scala\/group\/Group.html#contains(x:A):Boolean", "kind" : "abstract def"}, {"label" : "iterator", "tail" : "(): Iterator[A]", "member" : "scala.group.Group.iterator", "link" : "scala\/group\/Group.html#iterator:Iterator[A]", "kind" : "abstract def"}, {"label" : "finite", "tail" : ": Boolean", "member" : "scala.group.Group.finite", "link" : "scala\/group\/Group.html#finite:Boolean", "kind" : "abstract val"}, {"label" : "op", "tail" : "(x: A, y: A): A", "member" : "scala.group.Group.op", "link" : "scala\/group\/Group.html#op(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "inv", "tail" : "(x: A): A", "member" : "scala.group.Group.inv", "link" : "scala\/group\/Group.html#inv(x:A):A", "kind" : "abstract def"}, {"label" : "id", "tail" : ": A", "member" : "scala.group.Group.id", "link" : "scala\/group\/Group.html#id:A", "kind" : "abstract val"}], "shortDescription" : "A generic trait for immutable groups."}, {"name" : "scala.group.InfiniteGroup", "trait" : "scala\/group\/InfiniteGroup.html", "kind" : "trait", "members_trait" : [{"label" : "Subgroup", "tail" : "", "member" : "scala.group.Group.Subgroup", "link" : "scala\/group\/Group.html#SubgroupextendsGroup[A]withSet[A]", "kind" : "trait"}, {"label" : "printCayleyTable", "tail" : "(n: Int): Unit", "member" : "scala.group.InfiniteGroup.printCayleyTable", "link" : "scala\/group\/InfiniteGroup.html#printCayleyTable(n:Int):Unit", "kind" : "def"}, {"label" : "finite", "tail" : ": Boolean(false)", "member" : "scala.group.InfiniteGroup.finite", "link" : "scala\/group\/InfiniteGroup.html#finite:Boolean(false)", "kind" : "final val"}, {"label" : "biject", "tail" : "(bi: Bijection[A, B]): Group[B]", "member" : "scala.group.Group.biject", "link" : "scala\/group\/InfiniteGroup.html#biject[B](bi:scala.group.Bijection[A,B]):scala.group.Group[B]", "kind" : "def"}, {"label" : "order", "tail" : "(x: A): Int", "member" : "scala.group.Group.order", "link" : "scala\/group\/InfiniteGroup.html#order(x:A):Int", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: collection.Iterable[B]): LazyZip2[A, B, InfiniteGroup.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "scala\/group\/InfiniteGroup.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterable.toString", "link" : "scala\/group\/InfiniteGroup.html#toString():String", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.Iterable.stringPrefix", "link" : "scala\/group\/InfiniteGroup.html#stringPrefix:String", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "scala\/group\/InfiniteGroup.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): InfiniteGroup.this.type", "member" : "scala.collection.Iterable.seq", "link" : "scala\/group\/InfiniteGroup.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "iterableFactory", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.Iterable.iterableFactory", "link" : "scala\/group\/InfiniteGroup.html#iterableFactory:scala.collection.IterableFactory[Iterable]", "kind" : "def"}, {"label" : "coll", "tail" : "(): InfiniteGroup.this.type", "member" : "scala.collection.Iterable.coll", "link" : "scala\/group\/InfiniteGroup.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): InfiniteGroup.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "scala\/group\/InfiniteGroup.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableFactoryDefaults.empty", "link" : "scala\/group\/InfiniteGroup.html#empty:CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[A, collection.Iterable[A]]", "member" : "scala.collection.IterableFactoryDefaults.newSpecificBuilder", "link" : "scala\/group\/InfiniteGroup.html#newSpecificBuilder:scala.collection.mutable.Builder[A@scala.annotation.unchecked.uncheckedVariance,CC[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: collection.IterableOnce[A]): collection.Iterable[A]", "member" : "scala.collection.IterableFactoryDefaults.fromSpecific", "link" : "scala\/group\/InfiniteGroup.html#fromSpecific(coll:scala.collection.IterableOnce[A@scala.annotation.unchecked.uncheckedVariance]):CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "++:", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++:", "link" : "scala\/group\/InfiniteGroup.html#++:[B>:A](that:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (A) => U): collection.Iterable[A]", "member" : "scala.collection.IterableOps.tapEach", "link" : "scala\/group\/InfiniteGroup.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "inits", "tail" : "(): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.inits", "link" : "scala\/group\/InfiniteGroup.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.tails", "link" : "scala\/group\/InfiniteGroup.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (A) => (A1, A2, A3)): (collection.Iterable[A1], collection.Iterable[A2], collection.Iterable[A3])", "member" : "scala.collection.IterableOps.unzip3", "link" : "scala\/group\/InfiniteGroup.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (A) => (A1, A2)): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.unzip", "link" : "scala\/group\/InfiniteGroup.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: collection.Iterable[B], thisElem: A1, thatElem: B): collection.Iterable[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "scala\/group\/InfiniteGroup.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): collection.Iterable[(A, Int)]", "member" : "scala.collection.IterableOps.zipWithIndex", "link" : "scala\/group\/InfiniteGroup.html#zipWithIndex:CC[(A@scala.annotation.unchecked.uncheckedVariance,Int)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.zip", "link" : "scala\/group\/InfiniteGroup.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++", "link" : "scala\/group\/InfiniteGroup.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.concat", "link" : "scala\/group\/InfiniteGroup.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(f: (A) => Either[A1, A2]): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.partitionMap", "link" : "scala\/group\/InfiniteGroup.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.collect", "link" : "scala\/group\/InfiniteGroup.html#collect[B](pf:PartialFunction[A,B]):CC[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asIterable: (A) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatten", "link" : "scala\/group\/InfiniteGroup.html#flatten[B](implicitasIterable:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatMap", "link" : "scala\/group\/InfiniteGroup.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.map", "link" : "scala\/group\/InfiniteGroup.html#map[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (A, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "scala\/group\/InfiniteGroup.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, A) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanLeft", "link" : "scala\/group\/InfiniteGroup.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scan", "link" : "scala\/group\/InfiniteGroup.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: (A) => K)(f: (A) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "scala\/group\/InfiniteGroup.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: (A) => K)(f: (A) => B): Map[K, collection.Iterable[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "scala\/group\/InfiniteGroup.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (A) => K): Map[K, collection.Iterable[A]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "scala\/group\/InfiniteGroup.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.slice", "link" : "scala\/group\/InfiniteGroup.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "init", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOps.init", "link" : "scala\/group\/InfiniteGroup.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOps.tail", "link" : "scala\/group\/InfiniteGroup.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/InfiniteGroup.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/InfiniteGroup.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.grouped", "link" : "scala\/group\/InfiniteGroup.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): collection.Iterable[A]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "scala\/group\/InfiniteGroup.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.dropRight", "link" : "scala\/group\/InfiniteGroup.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.drop", "link" : "scala\/group\/InfiniteGroup.html#drop(n:Int):C", "kind" : "def"}, {"label" : "span", "tail" : "(p: (A) => Boolean): (collection.Iterable[A], collection.Iterable[A])", "member" : "scala.collection.IterableOps.span", "link" : "scala\/group\/InfiniteGroup.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): collection.Iterable[A]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "scala\/group\/InfiniteGroup.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.takeRight", "link" : "scala\/group\/InfiniteGroup.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.take", "link" : "scala\/group\/InfiniteGroup.html#take(n:Int):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (collection.Iterable[A], collection.Iterable[A])", "member" : "scala.collection.IterableOps.splitAt", "link" : "scala\/group\/InfiniteGroup.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (A) => Boolean): (collection.Iterable[A], collection.Iterable[A])", "member" : "scala.collection.IterableOps.partition", "link" : "scala\/group\/InfiniteGroup.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): WithFilter[A, collection.Iterable]", "member" : "scala.collection.IterableOps.withFilter", "link" : "scala\/group\/InfiniteGroup.html#withFilter(p:A=>Boolean):scala.collection.WithFilter[A,CC]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (A) => Boolean): collection.Iterable[A]", "member" : "scala.collection.IterableOps.filterNot", "link" : "scala\/group\/InfiniteGroup.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (A) => Boolean): collection.Iterable[A]", "member" : "scala.collection.IterableOps.filter", "link" : "scala\/group\/InfiniteGroup.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: (A) => collection.Iterable[B]): collection.Iterable[collection.Iterable[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "scala\/group\/InfiniteGroup.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): View[A]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/InfiniteGroup.html#view(from:Int,until:Int):scala.collection.View[A]", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(that: collection.Iterable[_]): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/InfiniteGroup.html#sizeCompare(that:Iterable[_]):Int", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "scala\/group\/InfiniteGroup.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/InfiniteGroup.html#sizeCompare(otherSize:Int):Int", "kind" : "def"}, {"label" : "view", "tail" : "(): View[A]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/InfiniteGroup.html#view:scala.collection.View[A]", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[A]", "member" : "scala.collection.IterableOps.lastOption", "link" : "scala\/group\/InfiniteGroup.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): A", "member" : "scala.collection.IterableOps.last", "link" : "scala\/group\/InfiniteGroup.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[A]", "member" : "scala.collection.IterableOps.headOption", "link" : "scala\/group\/InfiniteGroup.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): A", "member" : "scala.collection.IterableOps.head", "link" : "scala\/group\/InfiniteGroup.html#head:A", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.IterableOps.companion", "link" : "scala\/group\/InfiniteGroup.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOps.repr", "link" : "scala\/group\/InfiniteGroup.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "scala\/group\/InfiniteGroup.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): collection.Traversable[A]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "scala\/group\/InfiniteGroup.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "scala\/group\/InfiniteGroup.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "scala\/group\/InfiniteGroup.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "scala\/group\/InfiniteGroup.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): collection.immutable.Stream[A]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "scala\/group\/InfiniteGroup.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): collection.immutable.IndexedSeq[A]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "scala\/group\/InfiniteGroup.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): collection.immutable.Seq[A]", "member" : "scala.collection.IterableOnceOps.toSeq", "link" : "scala\/group\/InfiniteGroup.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "scala\/group\/InfiniteGroup.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[A, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "scala\/group\/InfiniteGroup.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): collection.immutable.Vector[A]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "scala\/group\/InfiniteGroup.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): collection.immutable.List[A]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "scala\/group\/InfiniteGroup.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): collection.Iterator[A]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "scala\/group\/InfiniteGroup.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[A, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "scala\/group\/InfiniteGroup.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/InfiniteGroup.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, sep: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/InfiniteGroup.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, start: String, sep: String, end: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/InfiniteGroup.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/InfiniteGroup.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/InfiniteGroup.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/InfiniteGroup.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: collection.IterableOnce[B])(p: (A, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "scala\/group\/InfiniteGroup.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, A) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "scala\/group\/InfiniteGroup.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[A, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "scala\/group\/InfiniteGroup.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "scala\/group\/InfiniteGroup.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "scala\/group\/InfiniteGroup.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "scala\/group\/InfiniteGroup.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "scala\/group\/InfiniteGroup.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "scala\/group\/InfiniteGroup.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.max", "link" : "scala\/group\/InfiniteGroup.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "scala\/group\/InfiniteGroup.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.min", "link" : "scala\/group\/InfiniteGroup.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "scala\/group\/InfiniteGroup.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "scala\/group\/InfiniteGroup.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/InfiniteGroup.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/InfiniteGroup.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/InfiniteGroup.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "scala\/group\/InfiniteGroup.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.IterableOnceOps.size", "link" : "scala\/group\/InfiniteGroup.html#size:Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "scala\/group\/InfiniteGroup.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.isEmpty", "link" : "scala\/group\/InfiniteGroup.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (A, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "scala\/group\/InfiniteGroup.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, A) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "scala\/group\/InfiniteGroup.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "scala\/group\/InfiniteGroup.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "scala\/group\/InfiniteGroup.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "scala\/group\/InfiniteGroup.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "scala\/group\/InfiniteGroup.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "scala\/group\/InfiniteGroup.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "scala\/group\/InfiniteGroup.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "scala\/group\/InfiniteGroup.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "scala\/group\/InfiniteGroup.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "scala\/group\/InfiniteGroup.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Option[A]", "member" : "scala.collection.IterableOnceOps.find", "link" : "scala\/group\/InfiniteGroup.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (A) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "scala\/group\/InfiniteGroup.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "scala\/group\/InfiniteGroup.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "scala\/group\/InfiniteGroup.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "scala\/group\/InfiniteGroup.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "scala\/group\/InfiniteGroup.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "scala\/group\/InfiniteGroup.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[A, S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "scala\/group\/InfiniteGroup.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/InfiniteGroup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/InfiniteGroup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/InfiniteGroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/InfiniteGroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/InfiniteGroup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/InfiniteGroup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/InfiniteGroup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/InfiniteGroup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/InfiniteGroup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/InfiniteGroup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/InfiniteGroup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/InfiniteGroup.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/InfiniteGroup.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/InfiniteGroup.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/InfiniteGroup.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/InfiniteGroup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/InfiniteGroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/InfiniteGroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(x: A): Boolean", "member" : "scala.group.Group.contains", "link" : "scala\/group\/InfiniteGroup.html#contains(x:A):Boolean", "kind" : "abstract def"}, {"label" : "iterator", "tail" : "(): Iterator[A]", "member" : "scala.group.Group.iterator", "link" : "scala\/group\/InfiniteGroup.html#iterator:Iterator[A]", "kind" : "abstract def"}, {"label" : "op", "tail" : "(x: A, y: A): A", "member" : "scala.group.Group.op", "link" : "scala\/group\/InfiniteGroup.html#op(x:A,y:A):A", "kind" : "abstract def"}, {"label" : "inv", "tail" : "(x: A): A", "member" : "scala.group.Group.inv", "link" : "scala\/group\/InfiniteGroup.html#inv(x:A):A", "kind" : "abstract def"}, {"label" : "id", "tail" : ": A", "member" : "scala.group.Group.id", "link" : "scala\/group\/InfiniteGroup.html#id:A", "kind" : "abstract val"}], "shortDescription" : ""}, {"name" : "scala.group.MemoizedGroup", "shortDescription" : "Uses arrays to memoize a finite group.", "members_class" : [{"label" : "Subgroup", "tail" : "", "member" : "scala.group.FiniteGroup.Subgroup", "link" : "scala\/group\/FiniteGroup.html#SubgroupextendsFiniteGroup[A]withFiniteGroup.this.Subgroup", "kind" : "trait"}, {"label" : "MemoizedSubgroup", "tail" : "", "member" : "scala.group.MemoizedGroup.MemoizedSubgroup", "link" : "scala\/group\/MemoizedGroup.html#MemoizedSubgroupextendsAnyRef", "kind" : "class"}, {"label" : "subgroupss", "tail" : ": Set[MemoizedSubgroup]", "member" : "scala.group.MemoizedGroup.subgroupss", "link" : "scala\/group\/MemoizedGroup.html#subgroupss:scala.collection.immutable.Set[MemoizedGroup.this.MemoizedSubgroup]", "kind" : "lazy val"}, {"label" : "bijection", "tail" : ": Bijection[A, Int]", "member" : "scala.group.MemoizedGroup.bijection", "link" : "scala\/group\/MemoizedGroup.html#bijection:scala.group.Bijection[A,Int]", "kind" : "val"}, {"label" : "contains", "tail" : "(i: Int): Boolean", "member" : "scala.group.MemoizedGroup.contains", "link" : "scala\/group\/MemoizedGroup.html#contains(i:Int):Boolean", "kind" : "def"}, {"label" : "iterator", "tail" : "(): collection.Iterator[Int]", "member" : "scala.group.MemoizedGroup.iterator", "link" : "scala\/group\/MemoizedGroup.html#iterator:Iterator[Int]", "kind" : "def"}, {"label" : "op", "tail" : "(i: Int, j: Int): Int", "member" : "scala.group.MemoizedGroup.op", "link" : "scala\/group\/MemoizedGroup.html#op(i:Int,j:Int):Int", "kind" : "def"}, {"label" : "inv", "tail" : "(i: Int): Int", "member" : "scala.group.MemoizedGroup.inv", "link" : "scala\/group\/MemoizedGroup.html#inv(i:Int):Int", "kind" : "def"}, {"label" : "id", "tail" : ": Int", "member" : "scala.group.MemoizedGroup.id", "link" : "scala\/group\/MemoizedGroup.html#id:Int", "kind" : "val"}, {"label" : "cayleymatrix", "tail" : ": Array[Array[Int]]", "member" : "scala.group.MemoizedGroup.cayleymatrix", "link" : "scala\/group\/MemoizedGroup.html#cayleymatrix:Array[Array[Int]]", "kind" : "val"}, {"label" : "invarray", "tail" : ": Array[Int]", "member" : "scala.group.MemoizedGroup.invarray", "link" : "scala\/group\/MemoizedGroup.html#invarray:Array[Int]", "kind" : "val"}, {"label" : "elemsarray", "tail" : ": Array[A]", "member" : "scala.group.MemoizedGroup.elemsarray", "link" : "scala\/group\/MemoizedGroup.html#elemsarray:Array[A]", "kind" : "val"}, {"label" : "hashmap", "tail" : ": HashMap[A, Int]", "member" : "scala.group.MemoizedGroup.hashmap", "link" : "scala\/group\/MemoizedGroup.html#hashmap:scala.collection.immutable.HashMap[A,Int]", "kind" : "val"}, {"label" : "parentiterator", "tail" : "(): collection.Iterator[A]", "member" : "scala.group.MemoizedGroup.parentiterator", "link" : "scala\/group\/MemoizedGroup.html#parentiterator:Iterator[A]", "kind" : "def"}, {"label" : "size", "tail" : ": Int", "member" : "scala.group.MemoizedGroup.size", "link" : "scala\/group\/MemoizedGroup.html#size:Int", "kind" : "lazy val"}, {"member" : "scala.group.MemoizedGroup#<init>", "error" : "unsupported entity"}, {"label" : "subgroups", "tail" : ": Seq[Group[Int]]", "member" : "scala.group.FiniteGroup.subgroups", "link" : "scala\/group\/MemoizedGroup.html#subgroups:Seq[scala.group.Group[A]]", "kind" : "lazy val"}, {"label" : "printSubgroupTable", "tail" : "(): Unit", "member" : "scala.group.FiniteGroup.printSubgroupTable", "link" : "scala\/group\/MemoizedGroup.html#printSubgroupTable:Unit", "kind" : "def"}, {"label" : "printCayleyTable", "tail" : "(): Unit", "member" : "scala.group.FiniteGroup.printCayleyTable", "link" : "scala\/group\/MemoizedGroup.html#printCayleyTable:Unit", "kind" : "def"}, {"label" : "printOrders", "tail" : "(): Unit", "member" : "scala.group.FiniteGroup.printOrders", "link" : "scala\/group\/MemoizedGroup.html#printOrders:Unit", "kind" : "def"}, {"label" : "finite", "tail" : ": Boolean(true)", "member" : "scala.group.FiniteGroup.finite", "link" : "scala\/group\/MemoizedGroup.html#finite:Boolean(true)", "kind" : "final val"}, {"label" : "biject", "tail" : "(bi: Bijection[Int, B]): Group[B]", "member" : "scala.group.Group.biject", "link" : "scala\/group\/MemoizedGroup.html#biject[B](bi:scala.group.Bijection[A,B]):scala.group.Group[B]", "kind" : "def"}, {"label" : "order", "tail" : "(x: Int): Int", "member" : "scala.group.Group.order", "link" : "scala\/group\/MemoizedGroup.html#order(x:A):Int", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: collection.Iterable[B]): LazyZip2[Int, B, MemoizedGroup.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "scala\/group\/MemoizedGroup.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterable.toString", "link" : "scala\/group\/MemoizedGroup.html#toString():String", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.Iterable.stringPrefix", "link" : "scala\/group\/MemoizedGroup.html#stringPrefix:String", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "scala\/group\/MemoizedGroup.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): MemoizedGroup.this.type", "member" : "scala.collection.Iterable.seq", "link" : "scala\/group\/MemoizedGroup.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "iterableFactory", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.Iterable.iterableFactory", "link" : "scala\/group\/MemoizedGroup.html#iterableFactory:scala.collection.IterableFactory[Iterable]", "kind" : "def"}, {"label" : "coll", "tail" : "(): MemoizedGroup.this.type", "member" : "scala.collection.Iterable.coll", "link" : "scala\/group\/MemoizedGroup.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): MemoizedGroup.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "scala\/group\/MemoizedGroup.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): collection.Iterable[Int]", "member" : "scala.collection.IterableFactoryDefaults.empty", "link" : "scala\/group\/MemoizedGroup.html#empty:CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[Int, collection.Iterable[Int]]", "member" : "scala.collection.IterableFactoryDefaults.newSpecificBuilder", "link" : "scala\/group\/MemoizedGroup.html#newSpecificBuilder:scala.collection.mutable.Builder[A@scala.annotation.unchecked.uncheckedVariance,CC[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: collection.IterableOnce[Int]): collection.Iterable[Int]", "member" : "scala.collection.IterableFactoryDefaults.fromSpecific", "link" : "scala\/group\/MemoizedGroup.html#fromSpecific(coll:scala.collection.IterableOnce[A@scala.annotation.unchecked.uncheckedVariance]):CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "++:", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++:", "link" : "scala\/group\/MemoizedGroup.html#++:[B>:A](that:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (Int) => U): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.tapEach", "link" : "scala\/group\/MemoizedGroup.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "inits", "tail" : "(): collection.Iterator[collection.Iterable[Int]]", "member" : "scala.collection.IterableOps.inits", "link" : "scala\/group\/MemoizedGroup.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): collection.Iterator[collection.Iterable[Int]]", "member" : "scala.collection.IterableOps.tails", "link" : "scala\/group\/MemoizedGroup.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Int) => (A1, A2, A3)): (collection.Iterable[A1], collection.Iterable[A2], collection.Iterable[A3])", "member" : "scala.collection.IterableOps.unzip3", "link" : "scala\/group\/MemoizedGroup.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Int) => (A1, A2)): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.unzip", "link" : "scala\/group\/MemoizedGroup.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: collection.Iterable[B], thisElem: A1, thatElem: B): collection.Iterable[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "scala\/group\/MemoizedGroup.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): collection.Iterable[(Int, Int)]", "member" : "scala.collection.IterableOps.zipWithIndex", "link" : "scala\/group\/MemoizedGroup.html#zipWithIndex:CC[(A@scala.annotation.unchecked.uncheckedVariance,Int)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[(Int, B)]", "member" : "scala.collection.IterableOps.zip", "link" : "scala\/group\/MemoizedGroup.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++", "link" : "scala\/group\/MemoizedGroup.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.concat", "link" : "scala\/group\/MemoizedGroup.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(f: (Int) => Either[A1, A2]): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.partitionMap", "link" : "scala\/group\/MemoizedGroup.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Int, B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.collect", "link" : "scala\/group\/MemoizedGroup.html#collect[B](pf:PartialFunction[A,B]):CC[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asIterable: (Int) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatten", "link" : "scala\/group\/MemoizedGroup.html#flatten[B](implicitasIterable:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Int) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatMap", "link" : "scala\/group\/MemoizedGroup.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Int) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.map", "link" : "scala\/group\/MemoizedGroup.html#map[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Int, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "scala\/group\/MemoizedGroup.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Int) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanLeft", "link" : "scala\/group\/MemoizedGroup.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scan", "link" : "scala\/group\/MemoizedGroup.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: (Int) => K)(f: (Int) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "scala\/group\/MemoizedGroup.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: (Int) => K)(f: (Int) => B): Map[K, collection.Iterable[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "scala\/group\/MemoizedGroup.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Int) => K): Map[K, collection.Iterable[Int]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "scala\/group\/MemoizedGroup.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.slice", "link" : "scala\/group\/MemoizedGroup.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "init", "tail" : "(): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.init", "link" : "scala\/group\/MemoizedGroup.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.tail", "link" : "scala\/group\/MemoizedGroup.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): collection.Iterator[collection.Iterable[Int]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/MemoizedGroup.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): collection.Iterator[collection.Iterable[Int]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/MemoizedGroup.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): collection.Iterator[collection.Iterable[Int]]", "member" : "scala.collection.IterableOps.grouped", "link" : "scala\/group\/MemoizedGroup.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Int) => Boolean): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "scala\/group\/MemoizedGroup.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.dropRight", "link" : "scala\/group\/MemoizedGroup.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.drop", "link" : "scala\/group\/MemoizedGroup.html#drop(n:Int):C", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Int) => Boolean): (collection.Iterable[Int], collection.Iterable[Int])", "member" : "scala.collection.IterableOps.span", "link" : "scala\/group\/MemoizedGroup.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Int) => Boolean): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "scala\/group\/MemoizedGroup.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.takeRight", "link" : "scala\/group\/MemoizedGroup.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.take", "link" : "scala\/group\/MemoizedGroup.html#take(n:Int):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (collection.Iterable[Int], collection.Iterable[Int])", "member" : "scala.collection.IterableOps.splitAt", "link" : "scala\/group\/MemoizedGroup.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Int) => Boolean): (collection.Iterable[Int], collection.Iterable[Int])", "member" : "scala.collection.IterableOps.partition", "link" : "scala\/group\/MemoizedGroup.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Int) => Boolean): WithFilter[Int, collection.Iterable]", "member" : "scala.collection.IterableOps.withFilter", "link" : "scala\/group\/MemoizedGroup.html#withFilter(p:A=>Boolean):scala.collection.WithFilter[A,CC]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (Int) => Boolean): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.filterNot", "link" : "scala\/group\/MemoizedGroup.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (Int) => Boolean): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.filter", "link" : "scala\/group\/MemoizedGroup.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: (Int) => collection.Iterable[B]): collection.Iterable[collection.Iterable[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "scala\/group\/MemoizedGroup.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): View[Int]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/MemoizedGroup.html#view(from:Int,until:Int):scala.collection.View[A]", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(that: collection.Iterable[_]): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/MemoizedGroup.html#sizeCompare(that:Iterable[_]):Int", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "scala\/group\/MemoizedGroup.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/MemoizedGroup.html#sizeCompare(otherSize:Int):Int", "kind" : "def"}, {"label" : "view", "tail" : "(): View[Int]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/MemoizedGroup.html#view:scala.collection.View[A]", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[Int]", "member" : "scala.collection.IterableOps.lastOption", "link" : "scala\/group\/MemoizedGroup.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Int", "member" : "scala.collection.IterableOps.last", "link" : "scala\/group\/MemoizedGroup.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Int]", "member" : "scala.collection.IterableOps.headOption", "link" : "scala\/group\/MemoizedGroup.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): Int", "member" : "scala.collection.IterableOps.head", "link" : "scala\/group\/MemoizedGroup.html#head:A", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.IterableOps.companion", "link" : "scala\/group\/MemoizedGroup.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.repr", "link" : "scala\/group\/MemoizedGroup.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "scala\/group\/MemoizedGroup.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): collection.Traversable[Int]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "scala\/group\/MemoizedGroup.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): collection.Iterable[Int]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "scala\/group\/MemoizedGroup.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "scala\/group\/MemoizedGroup.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "scala\/group\/MemoizedGroup.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): collection.immutable.Stream[Int]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "scala\/group\/MemoizedGroup.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): collection.immutable.IndexedSeq[Int]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "scala\/group\/MemoizedGroup.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): collection.immutable.Seq[Int]", "member" : "scala.collection.IterableOnceOps.toSeq", "link" : "scala\/group\/MemoizedGroup.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "scala\/group\/MemoizedGroup.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Int, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "scala\/group\/MemoizedGroup.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): collection.immutable.Vector[Int]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "scala\/group\/MemoizedGroup.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): collection.immutable.List[Int]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "scala\/group\/MemoizedGroup.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): collection.Iterator[Int]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "scala\/group\/MemoizedGroup.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[Int, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "scala\/group\/MemoizedGroup.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/MemoizedGroup.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, sep: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/MemoizedGroup.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, start: String, sep: String, end: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/MemoizedGroup.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/MemoizedGroup.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/MemoizedGroup.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/MemoizedGroup.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: collection.IterableOnce[B])(p: (Int, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "scala\/group\/MemoizedGroup.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, Int) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "scala\/group\/MemoizedGroup.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Int, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "scala\/group\/MemoizedGroup.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (Int) => B)(cmp: math.Ordering[B]): Option[Int]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "scala\/group\/MemoizedGroup.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Int) => B)(cmp: math.Ordering[B]): Int", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "scala\/group\/MemoizedGroup.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (Int) => B)(cmp: math.Ordering[B]): Option[Int]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "scala\/group\/MemoizedGroup.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Int) => B)(cmp: math.Ordering[B]): Int", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "scala\/group\/MemoizedGroup.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: math.Ordering[B]): Option[Int]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "scala\/group\/MemoizedGroup.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: math.Ordering[B]): Int", "member" : "scala.collection.IterableOnceOps.max", "link" : "scala\/group\/MemoizedGroup.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: math.Ordering[B]): Option[Int]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "scala\/group\/MemoizedGroup.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: math.Ordering[B]): Int", "member" : "scala.collection.IterableOnceOps.min", "link" : "scala\/group\/MemoizedGroup.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "scala\/group\/MemoizedGroup.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "scala\/group\/MemoizedGroup.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/MemoizedGroup.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/MemoizedGroup.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/MemoizedGroup.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "scala\/group\/MemoizedGroup.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "scala\/group\/MemoizedGroup.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.isEmpty", "link" : "scala\/group\/MemoizedGroup.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Int, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "scala\/group\/MemoizedGroup.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Int) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "scala\/group\/MemoizedGroup.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Int, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "scala\/group\/MemoizedGroup.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Int) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "scala\/group\/MemoizedGroup.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "scala\/group\/MemoizedGroup.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "scala\/group\/MemoizedGroup.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "scala\/group\/MemoizedGroup.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Int, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "scala\/group\/MemoizedGroup.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Int) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "scala\/group\/MemoizedGroup.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Int, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "scala\/group\/MemoizedGroup.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Int) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "scala\/group\/MemoizedGroup.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Int) => Boolean): Option[Int]", "member" : "scala.collection.IterableOnceOps.find", "link" : "scala\/group\/MemoizedGroup.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Int) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "scala\/group\/MemoizedGroup.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Int) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "scala\/group\/MemoizedGroup.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Int) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "scala\/group\/MemoizedGroup.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Int) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "scala\/group\/MemoizedGroup.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "scala\/group\/MemoizedGroup.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "scala\/group\/MemoizedGroup.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[Int, S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "scala\/group\/MemoizedGroup.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/MemoizedGroup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/MemoizedGroup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/MemoizedGroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/MemoizedGroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/MemoizedGroup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/MemoizedGroup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/MemoizedGroup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/MemoizedGroup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/MemoizedGroup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/MemoizedGroup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/MemoizedGroup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/MemoizedGroup.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/MemoizedGroup.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/MemoizedGroup.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/MemoizedGroup.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/MemoizedGroup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/MemoizedGroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/MemoizedGroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scala\/group\/MemoizedGroup.html", "kind" : "class"}, {"name" : "scala.group.TrivialGroup", "shortDescription" : "", "members_class" : [{"label" : "Subgroup", "tail" : "", "member" : "scala.group.FiniteGroup.Subgroup", "link" : "scala\/group\/FiniteGroup.html#SubgroupextendsFiniteGroup[A]withFiniteGroup.this.Subgroup", "kind" : "trait"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.group.TrivialGroup.toString", "link" : "scala\/group\/TrivialGroup.html#toString():String", "kind" : "def"}, {"label" : "iterator", "tail" : "(): collection.Iterator[A]", "member" : "scala.group.TrivialGroup.iterator", "link" : "scala\/group\/TrivialGroup.html#iterator:Iterator[A]", "kind" : "def"}, {"label" : "op", "tail" : "(x: A, y: A): A", "member" : "scala.group.TrivialGroup.op", "link" : "scala\/group\/TrivialGroup.html#op(x:A,y:A):A", "kind" : "def"}, {"label" : "inv", "tail" : "(x: A): A", "member" : "scala.group.TrivialGroup.inv", "link" : "scala\/group\/TrivialGroup.html#inv(x:A):A", "kind" : "def"}, {"member" : "scala.group.TrivialGroup#<init>", "error" : "unsupported entity"}, {"label" : "id", "tail" : ": A", "member" : "scala.group.TrivialGroup.id", "link" : "scala\/group\/TrivialGroup.html#id:A", "kind" : "val"}, {"label" : "subgroups", "tail" : ": Seq[Group[A]]", "member" : "scala.group.FiniteGroup.subgroups", "link" : "scala\/group\/TrivialGroup.html#subgroups:Seq[scala.group.Group[A]]", "kind" : "lazy val"}, {"label" : "printSubgroupTable", "tail" : "(): Unit", "member" : "scala.group.FiniteGroup.printSubgroupTable", "link" : "scala\/group\/TrivialGroup.html#printSubgroupTable:Unit", "kind" : "def"}, {"label" : "printCayleyTable", "tail" : "(): Unit", "member" : "scala.group.FiniteGroup.printCayleyTable", "link" : "scala\/group\/TrivialGroup.html#printCayleyTable:Unit", "kind" : "def"}, {"label" : "printOrders", "tail" : "(): Unit", "member" : "scala.group.FiniteGroup.printOrders", "link" : "scala\/group\/TrivialGroup.html#printOrders:Unit", "kind" : "def"}, {"label" : "contains", "tail" : "(x: A): Boolean", "member" : "scala.group.FiniteGroup.contains", "link" : "scala\/group\/TrivialGroup.html#contains(x:A):Boolean", "kind" : "def"}, {"label" : "size", "tail" : ": Int", "member" : "scala.group.FiniteGroup.size", "link" : "scala\/group\/TrivialGroup.html#size:Int", "kind" : "lazy val"}, {"label" : "finite", "tail" : ": Boolean(true)", "member" : "scala.group.FiniteGroup.finite", "link" : "scala\/group\/TrivialGroup.html#finite:Boolean(true)", "kind" : "final val"}, {"label" : "biject", "tail" : "(bi: Bijection[A, B]): Group[B]", "member" : "scala.group.Group.biject", "link" : "scala\/group\/TrivialGroup.html#biject[B](bi:scala.group.Bijection[A,B]):scala.group.Group[B]", "kind" : "def"}, {"label" : "order", "tail" : "(x: A): Int", "member" : "scala.group.Group.order", "link" : "scala\/group\/TrivialGroup.html#order(x:A):Int", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: collection.Iterable[B]): LazyZip2[A, B, TrivialGroup.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "scala\/group\/TrivialGroup.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.Iterable.stringPrefix", "link" : "scala\/group\/TrivialGroup.html#stringPrefix:String", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "scala\/group\/TrivialGroup.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): TrivialGroup.this.type", "member" : "scala.collection.Iterable.seq", "link" : "scala\/group\/TrivialGroup.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "iterableFactory", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.Iterable.iterableFactory", "link" : "scala\/group\/TrivialGroup.html#iterableFactory:scala.collection.IterableFactory[Iterable]", "kind" : "def"}, {"label" : "coll", "tail" : "(): TrivialGroup.this.type", "member" : "scala.collection.Iterable.coll", "link" : "scala\/group\/TrivialGroup.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): TrivialGroup.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "scala\/group\/TrivialGroup.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableFactoryDefaults.empty", "link" : "scala\/group\/TrivialGroup.html#empty:CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[A, collection.Iterable[A]]", "member" : "scala.collection.IterableFactoryDefaults.newSpecificBuilder", "link" : "scala\/group\/TrivialGroup.html#newSpecificBuilder:scala.collection.mutable.Builder[A@scala.annotation.unchecked.uncheckedVariance,CC[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: collection.IterableOnce[A]): collection.Iterable[A]", "member" : "scala.collection.IterableFactoryDefaults.fromSpecific", "link" : "scala\/group\/TrivialGroup.html#fromSpecific(coll:scala.collection.IterableOnce[A@scala.annotation.unchecked.uncheckedVariance]):CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "++:", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++:", "link" : "scala\/group\/TrivialGroup.html#++:[B>:A](that:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (A) => U): collection.Iterable[A]", "member" : "scala.collection.IterableOps.tapEach", "link" : "scala\/group\/TrivialGroup.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "inits", "tail" : "(): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.inits", "link" : "scala\/group\/TrivialGroup.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.tails", "link" : "scala\/group\/TrivialGroup.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (A) => (A1, A2, A3)): (collection.Iterable[A1], collection.Iterable[A2], collection.Iterable[A3])", "member" : "scala.collection.IterableOps.unzip3", "link" : "scala\/group\/TrivialGroup.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (A) => (A1, A2)): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.unzip", "link" : "scala\/group\/TrivialGroup.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: collection.Iterable[B], thisElem: A1, thatElem: B): collection.Iterable[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "scala\/group\/TrivialGroup.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): collection.Iterable[(A, Int)]", "member" : "scala.collection.IterableOps.zipWithIndex", "link" : "scala\/group\/TrivialGroup.html#zipWithIndex:CC[(A@scala.annotation.unchecked.uncheckedVariance,Int)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[(A, B)]", "member" : "scala.collection.IterableOps.zip", "link" : "scala\/group\/TrivialGroup.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++", "link" : "scala\/group\/TrivialGroup.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.concat", "link" : "scala\/group\/TrivialGroup.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(f: (A) => Either[A1, A2]): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.partitionMap", "link" : "scala\/group\/TrivialGroup.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.collect", "link" : "scala\/group\/TrivialGroup.html#collect[B](pf:PartialFunction[A,B]):CC[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asIterable: (A) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatten", "link" : "scala\/group\/TrivialGroup.html#flatten[B](implicitasIterable:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatMap", "link" : "scala\/group\/TrivialGroup.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.map", "link" : "scala\/group\/TrivialGroup.html#map[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (A, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "scala\/group\/TrivialGroup.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, A) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanLeft", "link" : "scala\/group\/TrivialGroup.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scan", "link" : "scala\/group\/TrivialGroup.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: (A) => K)(f: (A) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "scala\/group\/TrivialGroup.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: (A) => K)(f: (A) => B): Map[K, collection.Iterable[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "scala\/group\/TrivialGroup.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (A) => K): Map[K, collection.Iterable[A]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "scala\/group\/TrivialGroup.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.slice", "link" : "scala\/group\/TrivialGroup.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "init", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOps.init", "link" : "scala\/group\/TrivialGroup.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOps.tail", "link" : "scala\/group\/TrivialGroup.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/TrivialGroup.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/TrivialGroup.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): collection.Iterator[collection.Iterable[A]]", "member" : "scala.collection.IterableOps.grouped", "link" : "scala\/group\/TrivialGroup.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): collection.Iterable[A]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "scala\/group\/TrivialGroup.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.dropRight", "link" : "scala\/group\/TrivialGroup.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.drop", "link" : "scala\/group\/TrivialGroup.html#drop(n:Int):C", "kind" : "def"}, {"label" : "span", "tail" : "(p: (A) => Boolean): (collection.Iterable[A], collection.Iterable[A])", "member" : "scala.collection.IterableOps.span", "link" : "scala\/group\/TrivialGroup.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): collection.Iterable[A]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "scala\/group\/TrivialGroup.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.takeRight", "link" : "scala\/group\/TrivialGroup.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): collection.Iterable[A]", "member" : "scala.collection.IterableOps.take", "link" : "scala\/group\/TrivialGroup.html#take(n:Int):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (collection.Iterable[A], collection.Iterable[A])", "member" : "scala.collection.IterableOps.splitAt", "link" : "scala\/group\/TrivialGroup.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (A) => Boolean): (collection.Iterable[A], collection.Iterable[A])", "member" : "scala.collection.IterableOps.partition", "link" : "scala\/group\/TrivialGroup.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): WithFilter[A, collection.Iterable]", "member" : "scala.collection.IterableOps.withFilter", "link" : "scala\/group\/TrivialGroup.html#withFilter(p:A=>Boolean):scala.collection.WithFilter[A,CC]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (A) => Boolean): collection.Iterable[A]", "member" : "scala.collection.IterableOps.filterNot", "link" : "scala\/group\/TrivialGroup.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (A) => Boolean): collection.Iterable[A]", "member" : "scala.collection.IterableOps.filter", "link" : "scala\/group\/TrivialGroup.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: (A) => collection.Iterable[B]): collection.Iterable[collection.Iterable[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "scala\/group\/TrivialGroup.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): View[A]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/TrivialGroup.html#view(from:Int,until:Int):scala.collection.View[A]", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(that: collection.Iterable[_]): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/TrivialGroup.html#sizeCompare(that:Iterable[_]):Int", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "scala\/group\/TrivialGroup.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/TrivialGroup.html#sizeCompare(otherSize:Int):Int", "kind" : "def"}, {"label" : "view", "tail" : "(): View[A]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/TrivialGroup.html#view:scala.collection.View[A]", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[A]", "member" : "scala.collection.IterableOps.lastOption", "link" : "scala\/group\/TrivialGroup.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): A", "member" : "scala.collection.IterableOps.last", "link" : "scala\/group\/TrivialGroup.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[A]", "member" : "scala.collection.IterableOps.headOption", "link" : "scala\/group\/TrivialGroup.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): A", "member" : "scala.collection.IterableOps.head", "link" : "scala\/group\/TrivialGroup.html#head:A", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.IterableOps.companion", "link" : "scala\/group\/TrivialGroup.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOps.repr", "link" : "scala\/group\/TrivialGroup.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "scala\/group\/TrivialGroup.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): collection.Traversable[A]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "scala\/group\/TrivialGroup.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): collection.Iterable[A]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "scala\/group\/TrivialGroup.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "scala\/group\/TrivialGroup.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "scala\/group\/TrivialGroup.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): collection.immutable.Stream[A]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "scala\/group\/TrivialGroup.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): collection.immutable.IndexedSeq[A]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "scala\/group\/TrivialGroup.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): collection.immutable.Seq[A]", "member" : "scala.collection.IterableOnceOps.toSeq", "link" : "scala\/group\/TrivialGroup.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "scala\/group\/TrivialGroup.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[A, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "scala\/group\/TrivialGroup.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): collection.immutable.Vector[A]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "scala\/group\/TrivialGroup.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): collection.immutable.List[A]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "scala\/group\/TrivialGroup.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): collection.Iterator[A]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "scala\/group\/TrivialGroup.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[A, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "scala\/group\/TrivialGroup.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/TrivialGroup.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, sep: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/TrivialGroup.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, start: String, sep: String, end: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/TrivialGroup.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/TrivialGroup.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/TrivialGroup.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/TrivialGroup.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: collection.IterableOnce[B])(p: (A, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "scala\/group\/TrivialGroup.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, A) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "scala\/group\/TrivialGroup.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[A, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "scala\/group\/TrivialGroup.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "scala\/group\/TrivialGroup.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "scala\/group\/TrivialGroup.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "scala\/group\/TrivialGroup.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (A) => B)(cmp: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "scala\/group\/TrivialGroup.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "scala\/group\/TrivialGroup.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.max", "link" : "scala\/group\/TrivialGroup.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: math.Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "scala\/group\/TrivialGroup.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: math.Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.min", "link" : "scala\/group\/TrivialGroup.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "scala\/group\/TrivialGroup.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "scala\/group\/TrivialGroup.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/TrivialGroup.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/TrivialGroup.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/TrivialGroup.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "scala\/group\/TrivialGroup.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "scala\/group\/TrivialGroup.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.isEmpty", "link" : "scala\/group\/TrivialGroup.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (A, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "scala\/group\/TrivialGroup.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, A) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "scala\/group\/TrivialGroup.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "scala\/group\/TrivialGroup.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "scala\/group\/TrivialGroup.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "scala\/group\/TrivialGroup.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "scala\/group\/TrivialGroup.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "scala\/group\/TrivialGroup.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "scala\/group\/TrivialGroup.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "scala\/group\/TrivialGroup.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "scala\/group\/TrivialGroup.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "scala\/group\/TrivialGroup.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Option[A]", "member" : "scala.collection.IterableOnceOps.find", "link" : "scala\/group\/TrivialGroup.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (A) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "scala\/group\/TrivialGroup.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "scala\/group\/TrivialGroup.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "scala\/group\/TrivialGroup.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "scala\/group\/TrivialGroup.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "scala\/group\/TrivialGroup.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "scala\/group\/TrivialGroup.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[A, S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "scala\/group\/TrivialGroup.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/TrivialGroup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/TrivialGroup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/TrivialGroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/TrivialGroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/TrivialGroup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/TrivialGroup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/TrivialGroup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/TrivialGroup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/TrivialGroup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/TrivialGroup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/TrivialGroup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/TrivialGroup.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/TrivialGroup.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/TrivialGroup.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/TrivialGroup.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/TrivialGroup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/TrivialGroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/TrivialGroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scala\/group\/TrivialGroup.html", "kind" : "class"}], "scala.group.instance" : [{"name" : "scala.group.instance.Dihedral", "object" : "scala\/group\/instance\/Dihedral$.html", "members_object" : [{"label" : "Paramdihedral", "tail" : "", "member" : "scala.group.instance.Dihedral.Paramdihedral", "link" : "scala\/group\/instance\/Dihedral$.html#ParamdihedralextendsFiniteGroup[scala.group.instance.Dihedral.Diso]with(Int,Boolean)=>scala.group.instance.Dihedral.Diso", "kind" : "class"}, {"label" : "Diso", "tail" : "", "member" : "scala.group.instance.Dihedral.Diso", "link" : "scala\/group\/instance\/Dihedral$.html#DisoextendsAnyRef", "kind" : "class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/instance\/Dihedral$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/instance\/Dihedral$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/instance\/Dihedral$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/instance\/Dihedral$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/instance\/Dihedral$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/instance\/Dihedral$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/instance\/Dihedral$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Dihedral$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Dihedral$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Dihedral$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/instance\/Dihedral$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/instance\/Dihedral$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scala\/group\/instance\/Dihedral$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/instance\/Dihedral$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/instance\/Dihedral$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/instance\/Dihedral$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/instance\/Dihedral$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/instance\/Dihedral$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/instance\/Dihedral$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "scala\/group\/instance\/Dihedral.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/instance\/Dihedral.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/instance\/Dihedral.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/instance\/Dihedral.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/instance\/Dihedral.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/instance\/Dihedral.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/instance\/Dihedral.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/instance\/Dihedral.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Dihedral.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Dihedral.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Dihedral.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/instance\/Dihedral.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/instance\/Dihedral.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scala\/group\/instance\/Dihedral.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/instance\/Dihedral.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/instance\/Dihedral.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/instance\/Dihedral.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/instance\/Dihedral.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/instance\/Dihedral.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/instance\/Dihedral.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "scala.group.instance.Dn", "shortDescription" : "Factory for [Dihedral] instances.", "object" : "scala\/group\/instance\/Dn$.html", "members_object" : [{"label" : "apply", "tail" : "(n: Int): Paramdihedral", "member" : "scala.group.instance.Dn.apply", "link" : "scala\/group\/instance\/Dn$.html#apply(n:Int):scala.group.instance.Dihedral.Paramdihedral", "kind" : "def"}, {"label" : "hashmap", "tail" : ": Map[Int, Paramdihedral]", "member" : "scala.group.instance.Dn.hashmap", "link" : "scala\/group\/instance\/Dn$.html#hashmap:scala.collection.mutable.Map[Int,scala.group.instance.Dihedral.Paramdihedral]", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "scala\/group\/instance\/Dn$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Paramdihedral) => A): (Int) => A", "member" : "scala.Function1.andThen", "link" : "scala\/group\/instance\/Dn$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Int): (A) => Paramdihedral", "member" : "scala.Function1.compose", "link" : "scala\/group\/instance\/Dn$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/instance\/Dn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/instance\/Dn$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/instance\/Dn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/instance\/Dn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/instance\/Dn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/instance\/Dn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/instance\/Dn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Dn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Dn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Dn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/instance\/Dn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/instance\/Dn$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/instance\/Dn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/instance\/Dn$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/instance\/Dn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/instance\/Dn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/instance\/Dn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/instance\/Dn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "scala.group.instance.Doo", "shortDescription" : "", "object" : "scala\/group\/instance\/Doo$.html", "members_object" : [{"label" : "Subgroup", "tail" : "", "member" : "scala.group.Group.Subgroup", "link" : "scala\/group\/Group.html#SubgroupextendsGroup[A]withSet[A]", "kind" : "trait"}, {"label" : "iterator", "tail" : "(): InfiniteIterator[Diso] { ... \/* 2 definitions in type refinement *\/ }", "member" : "scala.group.instance.Doo.iterator", "link" : "scala\/group\/instance\/Doo$.html#iterator:InfiniteIterator[scala.group.instance.Dihedral.Diso]{defi:Int;defi_=(x$1:Int):Unit}", "kind" : "def"}, {"label" : "contains", "tail" : "(a: Diso): Boolean", "member" : "scala.group.instance.Doo.contains", "link" : "scala\/group\/instance\/Doo$.html#contains(a:scala.group.instance.Dihedral.Diso):Boolean", "kind" : "def"}, {"label" : "op", "tail" : "(a: Diso, b: Diso): Diso", "member" : "scala.group.instance.Doo.op", "link" : "scala\/group\/instance\/Doo$.html#op(a:scala.group.instance.Dihedral.Diso,b:scala.group.instance.Dihedral.Diso):scala.group.instance.Dihedral.Diso", "kind" : "def"}, {"label" : "inv", "tail" : "(a: Diso): Diso", "member" : "scala.group.instance.Doo.inv", "link" : "scala\/group\/instance\/Doo$.html#inv(a:scala.group.instance.Dihedral.Diso):scala.group.instance.Dihedral.Diso", "kind" : "def"}, {"label" : "id", "tail" : ": Diso", "member" : "scala.group.instance.Doo.id", "link" : "scala\/group\/instance\/Doo$.html#id:scala.group.instance.Dihedral.Diso", "kind" : "val"}, {"label" : "finite", "tail" : ": Boolean", "member" : "scala.group.instance.Doo.finite", "link" : "scala\/group\/instance\/Doo$.html#finite:Boolean", "kind" : "val"}, {"label" : "apply", "tail" : "(r: Int, s: Boolean): Diso", "member" : "scala.group.instance.Doo.apply", "link" : "scala\/group\/instance\/Doo$.html#apply(r:Int,s:Boolean):scala.group.instance.Dihedral.Diso", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function2.toString", "link" : "scala\/group\/instance\/Doo$.html#toString():String", "kind" : "def"}, {"label" : "tupled", "tail" : "(): ((Int, Boolean)) => Diso", "member" : "scala.Function2.tupled", "link" : "scala\/group\/instance\/Doo$.html#tupled:((T1,T2))=>R", "kind" : "def"}, {"label" : "curried", "tail" : "(): (Int) => (Boolean) => Diso", "member" : "scala.Function2.curried", "link" : "scala\/group\/instance\/Doo$.html#curried:T1=>(T2=>R)", "kind" : "def"}, {"label" : "biject", "tail" : "(bi: Bijection[Diso, B]): Group[B]", "member" : "scala.group.Group.biject", "link" : "scala\/group\/instance\/Doo$.html#biject[B](bi:scala.group.Bijection[A,B]):scala.group.Group[B]", "kind" : "def"}, {"label" : "order", "tail" : "(x: Diso): Int", "member" : "scala.group.Group.order", "link" : "scala\/group\/instance\/Doo$.html#order(x:A):Int", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: collection.Iterable[B]): LazyZip2[Diso, B, Doo.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "scala\/group\/instance\/Doo$.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.Iterable.stringPrefix", "link" : "scala\/group\/instance\/Doo$.html#stringPrefix:String", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "scala\/group\/instance\/Doo$.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): Doo.this.type", "member" : "scala.collection.Iterable.seq", "link" : "scala\/group\/instance\/Doo$.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "iterableFactory", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.Iterable.iterableFactory", "link" : "scala\/group\/instance\/Doo$.html#iterableFactory:scala.collection.IterableFactory[Iterable]", "kind" : "def"}, {"label" : "coll", "tail" : "(): Doo.this.type", "member" : "scala.collection.Iterable.coll", "link" : "scala\/group\/instance\/Doo$.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): Doo.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "scala\/group\/instance\/Doo$.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): collection.Iterable[Diso]", "member" : "scala.collection.IterableFactoryDefaults.empty", "link" : "scala\/group\/instance\/Doo$.html#empty:CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[Diso, collection.Iterable[Diso]]", "member" : "scala.collection.IterableFactoryDefaults.newSpecificBuilder", "link" : "scala\/group\/instance\/Doo$.html#newSpecificBuilder:scala.collection.mutable.Builder[A@scala.annotation.unchecked.uncheckedVariance,CC[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: collection.IterableOnce[Diso]): collection.Iterable[Diso]", "member" : "scala.collection.IterableFactoryDefaults.fromSpecific", "link" : "scala\/group\/instance\/Doo$.html#fromSpecific(coll:scala.collection.IterableOnce[A@scala.annotation.unchecked.uncheckedVariance]):CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "++:", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++:", "link" : "scala\/group\/instance\/Doo$.html#++:[B>:A](that:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (Diso) => U): collection.Iterable[Diso]", "member" : "scala.collection.IterableOps.tapEach", "link" : "scala\/group\/instance\/Doo$.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "inits", "tail" : "(): collection.Iterator[collection.Iterable[Diso]]", "member" : "scala.collection.IterableOps.inits", "link" : "scala\/group\/instance\/Doo$.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): collection.Iterator[collection.Iterable[Diso]]", "member" : "scala.collection.IterableOps.tails", "link" : "scala\/group\/instance\/Doo$.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Diso) => (A1, A2, A3)): (collection.Iterable[A1], collection.Iterable[A2], collection.Iterable[A3])", "member" : "scala.collection.IterableOps.unzip3", "link" : "scala\/group\/instance\/Doo$.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Diso) => (A1, A2)): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.unzip", "link" : "scala\/group\/instance\/Doo$.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: collection.Iterable[B], thisElem: A1, thatElem: B): collection.Iterable[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "scala\/group\/instance\/Doo$.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): collection.Iterable[(Diso, Int)]", "member" : "scala.collection.IterableOps.zipWithIndex", "link" : "scala\/group\/instance\/Doo$.html#zipWithIndex:CC[(A@scala.annotation.unchecked.uncheckedVariance,Int)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[(Diso, B)]", "member" : "scala.collection.IterableOps.zip", "link" : "scala\/group\/instance\/Doo$.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++", "link" : "scala\/group\/instance\/Doo$.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.concat", "link" : "scala\/group\/instance\/Doo$.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(f: (Diso) => Either[A1, A2]): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.partitionMap", "link" : "scala\/group\/instance\/Doo$.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Diso, B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.collect", "link" : "scala\/group\/instance\/Doo$.html#collect[B](pf:PartialFunction[A,B]):CC[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asIterable: (Diso) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatten", "link" : "scala\/group\/instance\/Doo$.html#flatten[B](implicitasIterable:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Diso) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatMap", "link" : "scala\/group\/instance\/Doo$.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Diso) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.map", "link" : "scala\/group\/instance\/Doo$.html#map[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Diso, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "scala\/group\/instance\/Doo$.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Diso) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanLeft", "link" : "scala\/group\/instance\/Doo$.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scan", "link" : "scala\/group\/instance\/Doo$.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: (Diso) => K)(f: (Diso) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "scala\/group\/instance\/Doo$.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: (Diso) => K)(f: (Diso) => B): Map[K, collection.Iterable[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "scala\/group\/instance\/Doo$.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Diso) => K): Map[K, collection.Iterable[Diso]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "scala\/group\/instance\/Doo$.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): collection.Iterable[Diso]", "member" : "scala.collection.IterableOps.slice", "link" : "scala\/group\/instance\/Doo$.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "init", "tail" : "(): collection.Iterable[Diso]", "member" : "scala.collection.IterableOps.init", "link" : "scala\/group\/instance\/Doo$.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): collection.Iterable[Diso]", "member" : "scala.collection.IterableOps.tail", "link" : "scala\/group\/instance\/Doo$.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): collection.Iterator[collection.Iterable[Diso]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/instance\/Doo$.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): collection.Iterator[collection.Iterable[Diso]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/instance\/Doo$.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): collection.Iterator[collection.Iterable[Diso]]", "member" : "scala.collection.IterableOps.grouped", "link" : "scala\/group\/instance\/Doo$.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Diso) => Boolean): collection.Iterable[Diso]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "scala\/group\/instance\/Doo$.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): collection.Iterable[Diso]", "member" : "scala.collection.IterableOps.dropRight", "link" : "scala\/group\/instance\/Doo$.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): collection.Iterable[Diso]", "member" : "scala.collection.IterableOps.drop", "link" : "scala\/group\/instance\/Doo$.html#drop(n:Int):C", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Diso) => Boolean): (collection.Iterable[Diso], collection.Iterable[Diso])", "member" : "scala.collection.IterableOps.span", "link" : "scala\/group\/instance\/Doo$.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Diso) => Boolean): collection.Iterable[Diso]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "scala\/group\/instance\/Doo$.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): collection.Iterable[Diso]", "member" : "scala.collection.IterableOps.takeRight", "link" : "scala\/group\/instance\/Doo$.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): collection.Iterable[Diso]", "member" : "scala.collection.IterableOps.take", "link" : "scala\/group\/instance\/Doo$.html#take(n:Int):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (collection.Iterable[Diso], collection.Iterable[Diso])", "member" : "scala.collection.IterableOps.splitAt", "link" : "scala\/group\/instance\/Doo$.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Diso) => Boolean): (collection.Iterable[Diso], collection.Iterable[Diso])", "member" : "scala.collection.IterableOps.partition", "link" : "scala\/group\/instance\/Doo$.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Diso) => Boolean): WithFilter[Diso, collection.Iterable]", "member" : "scala.collection.IterableOps.withFilter", "link" : "scala\/group\/instance\/Doo$.html#withFilter(p:A=>Boolean):scala.collection.WithFilter[A,CC]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (Diso) => Boolean): collection.Iterable[Diso]", "member" : "scala.collection.IterableOps.filterNot", "link" : "scala\/group\/instance\/Doo$.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (Diso) => Boolean): collection.Iterable[Diso]", "member" : "scala.collection.IterableOps.filter", "link" : "scala\/group\/instance\/Doo$.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: (Diso) => collection.Iterable[B]): collection.Iterable[collection.Iterable[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "scala\/group\/instance\/Doo$.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): View[Diso]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/instance\/Doo$.html#view(from:Int,until:Int):scala.collection.View[A]", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(that: collection.Iterable[_]): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/instance\/Doo$.html#sizeCompare(that:Iterable[_]):Int", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "scala\/group\/instance\/Doo$.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/instance\/Doo$.html#sizeCompare(otherSize:Int):Int", "kind" : "def"}, {"label" : "view", "tail" : "(): View[Diso]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/instance\/Doo$.html#view:scala.collection.View[A]", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[Diso]", "member" : "scala.collection.IterableOps.lastOption", "link" : "scala\/group\/instance\/Doo$.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Diso", "member" : "scala.collection.IterableOps.last", "link" : "scala\/group\/instance\/Doo$.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Diso]", "member" : "scala.collection.IterableOps.headOption", "link" : "scala\/group\/instance\/Doo$.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): Diso", "member" : "scala.collection.IterableOps.head", "link" : "scala\/group\/instance\/Doo$.html#head:A", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.IterableOps.companion", "link" : "scala\/group\/instance\/Doo$.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): collection.Iterable[Diso]", "member" : "scala.collection.IterableOps.repr", "link" : "scala\/group\/instance\/Doo$.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "scala\/group\/instance\/Doo$.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): collection.Traversable[Diso]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "scala\/group\/instance\/Doo$.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): collection.Iterable[Diso]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "scala\/group\/instance\/Doo$.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "scala\/group\/instance\/Doo$.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "scala\/group\/instance\/Doo$.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): collection.immutable.Stream[Diso]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "scala\/group\/instance\/Doo$.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): collection.immutable.IndexedSeq[Diso]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "scala\/group\/instance\/Doo$.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): collection.immutable.Seq[Diso]", "member" : "scala.collection.IterableOnceOps.toSeq", "link" : "scala\/group\/instance\/Doo$.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "scala\/group\/instance\/Doo$.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Diso, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "scala\/group\/instance\/Doo$.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): collection.immutable.Vector[Diso]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "scala\/group\/instance\/Doo$.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): collection.immutable.List[Diso]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "scala\/group\/instance\/Doo$.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): collection.Iterator[Diso]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "scala\/group\/instance\/Doo$.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[Diso, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "scala\/group\/instance\/Doo$.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/instance\/Doo$.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, sep: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/instance\/Doo$.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, start: String, sep: String, end: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/instance\/Doo$.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/instance\/Doo$.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/instance\/Doo$.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/instance\/Doo$.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: collection.IterableOnce[B])(p: (Diso, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "scala\/group\/instance\/Doo$.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, Diso) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "scala\/group\/instance\/Doo$.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Diso, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "scala\/group\/instance\/Doo$.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (Diso) => B)(cmp: math.Ordering[B]): Option[Diso]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "scala\/group\/instance\/Doo$.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Diso) => B)(cmp: math.Ordering[B]): Diso", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "scala\/group\/instance\/Doo$.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (Diso) => B)(cmp: math.Ordering[B]): Option[Diso]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "scala\/group\/instance\/Doo$.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Diso) => B)(cmp: math.Ordering[B]): Diso", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "scala\/group\/instance\/Doo$.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: math.Ordering[B]): Option[Diso]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "scala\/group\/instance\/Doo$.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: math.Ordering[B]): Diso", "member" : "scala.collection.IterableOnceOps.max", "link" : "scala\/group\/instance\/Doo$.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: math.Ordering[B]): Option[Diso]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "scala\/group\/instance\/Doo$.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: math.Ordering[B]): Diso", "member" : "scala.collection.IterableOnceOps.min", "link" : "scala\/group\/instance\/Doo$.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "scala\/group\/instance\/Doo$.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "scala\/group\/instance\/Doo$.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/instance\/Doo$.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/instance\/Doo$.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/instance\/Doo$.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "scala\/group\/instance\/Doo$.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.IterableOnceOps.size", "link" : "scala\/group\/instance\/Doo$.html#size:Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "scala\/group\/instance\/Doo$.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.isEmpty", "link" : "scala\/group\/instance\/Doo$.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Diso, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "scala\/group\/instance\/Doo$.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Diso) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "scala\/group\/instance\/Doo$.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Diso, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "scala\/group\/instance\/Doo$.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Diso) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "scala\/group\/instance\/Doo$.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "scala\/group\/instance\/Doo$.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "scala\/group\/instance\/Doo$.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "scala\/group\/instance\/Doo$.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Diso, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "scala\/group\/instance\/Doo$.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Diso) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "scala\/group\/instance\/Doo$.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Diso, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "scala\/group\/instance\/Doo$.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Diso) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "scala\/group\/instance\/Doo$.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Diso) => Boolean): Option[Diso]", "member" : "scala.collection.IterableOnceOps.find", "link" : "scala\/group\/instance\/Doo$.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Diso) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "scala\/group\/instance\/Doo$.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Diso) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "scala\/group\/instance\/Doo$.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Diso) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "scala\/group\/instance\/Doo$.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Diso) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "scala\/group\/instance\/Doo$.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "scala\/group\/instance\/Doo$.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "scala\/group\/instance\/Doo$.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[Diso, S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "scala\/group\/instance\/Doo$.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/instance\/Doo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/instance\/Doo$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/instance\/Doo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/instance\/Doo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/instance\/Doo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/instance\/Doo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/instance\/Doo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Doo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Doo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Doo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/instance\/Doo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/instance\/Doo$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/instance\/Doo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/instance\/Doo$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/instance\/Doo$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/instance\/Doo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/instance\/Doo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/instance\/Doo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "scala.group.instance.Permutation", "shortDescription" : "", "object" : "scala\/group\/instance\/Permutation$.html", "members_class" : [{"label" : "ImmutableKeySet", "tail" : "", "member" : "scala.collection.immutable.MapOps.ImmutableKeySet", "link" : "scala\/group\/instance\/Permutation.html#ImmutableKeySetextendsAbstractSet[K]withMapOps.this.GenKeySetwithDefaultSerializable", "kind" : "class"}, {"label" : "GenKeySet", "tail" : "", "member" : "scala.collection.MapOps.GenKeySet", "link" : "scala\/group\/instance\/Permutation.html#GenKeySetextendsAnyRef", "kind" : "trait"}, {"label" : "KeySet", "tail" : "", "member" : "scala.collection.MapOps.KeySet", "link" : "scala\/group\/instance\/Permutation.html#KeySetextendsAbstractSet[K]withMapOps.this.GenKeySetwithDefaultSerializable", "kind" : "class"}, {"label" : "compose", "tail" : "(that: Permutation): Permutation", "member" : "scala.group.instance.Permutation.compose", "link" : "scala\/group\/instance\/Permutation.html#compose(that:scala.group.instance.Permutation):scala.group.instance.Permutation", "kind" : "def"}, {"label" : "inverse", "tail" : ": Permutation", "member" : "scala.group.instance.Permutation.inverse", "link" : "scala\/group\/instance\/Permutation.html#inverse:scala.group.instance.Permutation", "kind" : "lazy val"}, {"label" : "hashCode", "tail" : ": Int", "member" : "scala.group.instance.Permutation.hashCode", "link" : "scala\/group\/instance\/Permutation.html#hashCode:Int", "kind" : "val"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "scala.group.instance.Permutation.equals", "link" : "scala\/group\/instance\/Permutation.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "get", "tail" : "(key: Int): Option[Int]", "member" : "scala.group.instance.Permutation.get", "link" : "scala\/group\/instance\/Permutation.html#get(key:Int):Option[Int]", "kind" : "def"}, {"label" : "updated", "tail" : "(key: Int, value: V): Map[Int, V]", "member" : "scala.group.instance.Permutation.updated", "link" : "scala\/group\/instance\/Permutation.html#updated[V>:Int](key:Int,value:V):scala.collection.immutable.Map[Int,V]", "kind" : "def"}, {"label" : "removed", "tail" : "(key: Int): Map[Int, Int]", "member" : "scala.group.instance.Permutation.removed", "link" : "scala\/group\/instance\/Permutation.html#removed(key:Int):scala.collection.immutable.Map[Int,Int]", "kind" : "def"}, {"label" : "toMap", "tail" : "(): Map[Int, Int]", "member" : "scala.group.instance.Permutation.toMap", "link" : "scala\/group\/instance\/Permutation.html#toMap:scala.collection.immutable.Map[Int,Int]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): collection.Iterator[(Int, Int)]", "member" : "scala.group.instance.Permutation.iterator", "link" : "scala\/group\/instance\/Permutation.html#iterator:Iterator[(Int,Int)]", "kind" : "def"}, {"label" : "toString", "tail" : ": String", "member" : "scala.group.instance.Permutation.toString", "link" : "scala\/group\/instance\/Permutation.html#toString:String", "kind" : "val"}, {"label" : "n", "tail" : ": Int", "member" : "scala.group.instance.Permutation.n", "link" : "scala\/group\/instance\/Permutation.html#n:Int", "kind" : "val"}, {"label" : "arr", "tail" : ": Array[Int]", "member" : "scala.group.instance.Permutation.arr", "link" : "scala\/group\/instance\/Permutation.html#arr:Array[Int]", "kind" : "val"}, {"label" : "withDefaultValue", "tail" : "(d: V1): Map[Int, V1]", "member" : "scala.collection.immutable.Map.withDefaultValue", "link" : "scala\/group\/instance\/Permutation.html#withDefaultValue[V1>:V](d:V1):scala.collection.immutable.Map[K,V1]", "kind" : "def"}, {"label" : "withDefault", "tail" : "(d: (Int) => V1): Map[Int, V1]", "member" : "scala.collection.immutable.Map.withDefault", "link" : "scala\/group\/instance\/Permutation.html#withDefault[V1>:V](d:K=>V1):scala.collection.immutable.Map[K,V1]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[(Int, Int), (K2, V2)]): Map[K2, V2]", "member" : "scala.collection.immutable.Map.toMap", "link" : "scala\/group\/instance\/Permutation.html#toMap[K2,V2](implicitev:(K,V)<:<(K2,V2)):scala.collection.immutable.Map[K2,V2]", "kind" : "final def"}, {"label" : "mapFactory", "tail" : "(): MapFactory[Map]", "member" : "scala.collection.immutable.Map.mapFactory", "link" : "scala\/group\/instance\/Permutation.html#mapFactory:scala.collection.MapFactory[scala.collection.immutable.Map]", "kind" : "def"}, {"label" : "keySet", "tail" : "(): Set[Int]", "member" : "scala.collection.immutable.MapOps.keySet", "link" : "scala\/group\/instance\/Permutation.html#keySet:scala.collection.immutable.Set[K]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (Int, Int) => W): Map[Int, W]", "member" : "scala.collection.immutable.MapOps.transform", "link" : "scala\/group\/instance\/Permutation.html#transform[W](f:(K,V)=>W):CC[K,W]", "kind" : "def"}, {"label" : "+", "tail" : "(kv: (Int, V1)): Map[Int, V1]", "member" : "scala.collection.immutable.MapOps.+", "link" : "scala\/group\/instance\/Permutation.html#+[V1>:V](kv:(K,V1)):CC[K,V1]", "kind" : "def"}, {"label" : "updatedWith", "tail" : "(key: Int)(remappingFunction: (Option[Int]) => Option[V1]): Map[Int, V1]", "member" : "scala.collection.immutable.MapOps.updatedWith", "link" : "scala\/group\/instance\/Permutation.html#updatedWith[V1>:V](key:K)(remappingFunction:Option[V]=>Option[V1]):CC[K,V1]", "kind" : "def"}, {"label" : "--", "tail" : "(keys: collection.IterableOnce[Int]): Map[Int, Int]", "member" : "scala.collection.immutable.MapOps.--", "link" : "scala\/group\/instance\/Permutation.html#--(keys:scala.collection.IterableOnce[K]):C", "kind" : "final def"}, {"label" : "removedAll", "tail" : "(keys: collection.IterableOnce[Int]): Map[Int, Int]", "member" : "scala.collection.immutable.MapOps.removedAll", "link" : "scala\/group\/instance\/Permutation.html#removedAll(keys:scala.collection.IterableOnce[K]):C", "kind" : "def"}, {"label" : "-", "tail" : "(key1: Int, key2: Int, keys: Int*): Map[Int, Int]", "member" : "scala.collection.immutable.MapOps.-", "link" : "scala\/group\/instance\/Permutation.html#-(key1:K,key2:K,keys:K*):C", "kind" : "def"}, {"label" : "-", "tail" : "(key: Int): Map[Int, Int]", "member" : "scala.collection.immutable.MapOps.-", "link" : "scala\/group\/instance\/Permutation.html#-(key:K):C", "kind" : "final def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.Map.stringPrefix", "link" : "scala\/group\/instance\/Permutation.html#stringPrefix:String", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.Map.canEqual", "link" : "scala\/group\/instance\/Permutation.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: ((Int, Int)) => Boolean): WithFilter[Int, Int, [x]collection.immutable.Iterable[x], [x, y]Map[x, y]]", "member" : "scala.collection.MapFactoryDefaults.withFilter", "link" : "scala\/group\/instance\/Permutation.html#withFilter(p:((K,V))=>Boolean):scala.collection.MapOps.WithFilter[K,V,WithFilterCC,CC]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Map[Int, Int]", "member" : "scala.collection.MapFactoryDefaults.empty", "link" : "scala\/group\/instance\/Permutation.html#empty:CC[K,V@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[(Int, Int), Map[Int, Int]]", "member" : "scala.collection.MapFactoryDefaults.newSpecificBuilder", "link" : "scala\/group\/instance\/Permutation.html#newSpecificBuilder:scala.collection.mutable.Builder[(K,V@scala.annotation.unchecked.uncheckedVariance),CC[K,V@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: collection.IterableOnce[(Int, Int)]): Map[Int, Int]", "member" : "scala.collection.MapFactoryDefaults.fromSpecific", "link" : "scala\/group\/instance\/Permutation.html#fromSpecific(coll:scala.collection.IterableOnce[(K,V@scala.annotation.unchecked.uncheckedVariance)]):CC[K,V@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "++:", "tail" : "(that: collection.IterableOnce[(Int, V1)]): Map[Int, V1]", "member" : "scala.collection.MapOps.++:", "link" : "scala\/group\/instance\/Permutation.html#++:[V1>:V](that:scala.collection.IterableOnce[(K,V1)]):CC[K,V1]", "kind" : "def"}, {"label" : "+", "tail" : "(elem1: (Int, V1), elem2: (Int, V1), elems: (Int, V1)*): Map[Int, V1]", "member" : "scala.collection.MapOps.+", "link" : "scala\/group\/instance\/Permutation.html#+[V1>:V](elem1:(K,V1),elem2:(K,V1),elems:(K,V1)*):CC[K,V1]", "kind" : "def"}, {"label" : "addString", "tail" : "(sb: collection.mutable.StringBuilder, start: String, sep: String, end: String): collection.mutable.StringBuilder", "member" : "scala.collection.MapOps.addString", "link" : "scala\/group\/instance\/Permutation.html#addString(sb:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "++", "tail" : "(xs: collection.IterableOnce[(Int, V2)]): Map[Int, V2]", "member" : "scala.collection.MapOps.++", "link" : "scala\/group\/instance\/Permutation.html#++[V2>:V](xs:scala.collection.IterableOnce[(K,V2)]):CC[K,V2]", "kind" : "def"}, {"label" : "concat", "tail" : "(suffix: collection.IterableOnce[(Int, V2)]): Map[Int, V2]", "member" : "scala.collection.MapOps.concat", "link" : "scala\/group\/instance\/Permutation.html#concat[V2>:V](suffix:scala.collection.IterableOnce[(K,V2)]):CC[K,V2]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((Int, Int)) => collection.IterableOnce[(K2, V2)]): Map[K2, V2]", "member" : "scala.collection.MapOps.flatMap", "link" : "scala\/group\/instance\/Permutation.html#flatMap[K2,V2](f:((K,V))=>scala.collection.IterableOnce[(K2,V2)]):CC[K2,V2]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[(Int, Int), (K2, V2)]): Map[K2, V2]", "member" : "scala.collection.MapOps.collect", "link" : "scala\/group\/instance\/Permutation.html#collect[K2,V2](pf:PartialFunction[(K,V),(K2,V2)]):CC[K2,V2]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((Int, Int)) => (K2, V2)): Map[K2, V2]", "member" : "scala.collection.MapOps.map", "link" : "scala\/group\/instance\/Permutation.html#map[K2,V2](f:((K,V))=>(K2,V2)):CC[K2,V2]", "kind" : "def"}, {"label" : "isDefinedAt", "tail" : "(key: Int): Boolean", "member" : "scala.collection.MapOps.isDefinedAt", "link" : "scala\/group\/instance\/Permutation.html#isDefinedAt(key:K):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(key: Int): Boolean", "member" : "scala.collection.MapOps.contains", "link" : "scala\/group\/instance\/Permutation.html#contains(key:K):Boolean", "kind" : "def"}, {"label" : "default", "tail" : "(key: Int): Int", "member" : "scala.collection.MapOps.default", "link" : "scala\/group\/instance\/Permutation.html#default(key:K):V", "kind" : "def"}, {"label" : "mapValues", "tail" : "(f: (Int) => W): MapView[Int, W]", "member" : "scala.collection.MapOps.mapValues", "link" : "scala\/group\/instance\/Permutation.html#mapValues[W](f:V=>W):scala.collection.MapView[K,W]", "kind" : "def"}, {"label" : "filterKeys", "tail" : "(p: (Int) => Boolean): MapView[Int, Int]", "member" : "scala.collection.MapOps.filterKeys", "link" : "scala\/group\/instance\/Permutation.html#filterKeys(p:K=>Boolean):scala.collection.MapView[K,V]", "kind" : "def"}, {"label" : "foreachEntry", "tail" : "(f: (Int, Int) => U): Unit", "member" : "scala.collection.MapOps.foreachEntry", "link" : "scala\/group\/instance\/Permutation.html#foreachEntry[U](f:(K,V)=>U):Unit", "kind" : "def"}, {"label" : "valuesIterator", "tail" : "(): collection.Iterator[Int]", "member" : "scala.collection.MapOps.valuesIterator", "link" : "scala\/group\/instance\/Permutation.html#valuesIterator:Iterator[V]", "kind" : "def"}, {"label" : "keysIterator", "tail" : "(): collection.Iterator[Int]", "member" : "scala.collection.MapOps.keysIterator", "link" : "scala\/group\/instance\/Permutation.html#keysIterator:Iterator[K]", "kind" : "def"}, {"label" : "values", "tail" : "(): collection.Iterable[Int]", "member" : "scala.collection.MapOps.values", "link" : "scala\/group\/instance\/Permutation.html#values:Iterable[V]", "kind" : "def"}, {"label" : "keys", "tail" : "(): collection.Iterable[Int]", "member" : "scala.collection.MapOps.keys", "link" : "scala\/group\/instance\/Permutation.html#keys:Iterable[K]", "kind" : "def"}, {"label" : "applyOrElse", "tail" : "(x: K1, default: (K1) => V1): V1", "member" : "scala.collection.MapOps.applyOrElse", "link" : "scala\/group\/instance\/Permutation.html#applyOrElse[K1<:K,V1>:V](x:K1,default:K1=>V1):V1", "kind" : "def"}, {"label" : "apply", "tail" : "(key: Int): Int", "member" : "scala.collection.MapOps.apply", "link" : "scala\/group\/instance\/Permutation.html#apply(key:K):V", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(key: Int, default: => V1): V1", "member" : "scala.collection.MapOps.getOrElse", "link" : "scala\/group\/instance\/Permutation.html#getOrElse[V1>:V](key:K,default:=>V1):V1", "kind" : "def"}, {"label" : "mapFromIterable", "tail" : "(it: collection.Iterable[(K2, V2)]): Map[K2, V2]", "member" : "scala.collection.MapOps.mapFromIterable", "link" : "scala\/group\/instance\/Permutation.html#mapFromIterable[K2,V2](it:Iterable[(K2,V2)]):CC[K2,V2]", "kind" : "final def"}, {"label" : "valueStepper", "tail" : "(shape: StepperShape[Int, S]): S", "member" : "scala.collection.MapOps.valueStepper", "link" : "scala\/group\/instance\/Permutation.html#valueStepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[V,S]):S", "kind" : "def"}, {"label" : "keyStepper", "tail" : "(shape: StepperShape[Int, S]): S", "member" : "scala.collection.MapOps.keyStepper", "link" : "scala\/group\/instance\/Permutation.html#keyStepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[K,S]):S", "kind" : "def"}, {"label" : "view", "tail" : "(): MapView[Int, Int]", "member" : "scala.collection.MapOps.view", "link" : "scala\/group\/instance\/Permutation.html#view:scala.collection.MapView[K,V]", "kind" : "def"}, {"label" : "runWith", "tail" : "(action: (Int) => U): (Int) => Boolean", "member" : "scala.PartialFunction.runWith", "link" : "scala\/group\/instance\/Permutation.html#runWith[U](action:B=>U):A=>Boolean", "kind" : "def"}, {"label" : "lift", "tail" : "(): (Int) => Option[Int]", "member" : "scala.PartialFunction.lift", "link" : "scala\/group\/instance\/Permutation.html#lift:A=>Option[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(k: PartialFunction[R, Int]): PartialFunction[R, Int]", "member" : "scala.PartialFunction.compose", "link" : "scala\/group\/instance\/Permutation.html#compose[R](k:PartialFunction[R,A]):PartialFunction[R,B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: PartialFunction[Int, C]): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "scala\/group\/instance\/Permutation.html#andThen[C](k:PartialFunction[B,C]):PartialFunction[A,C]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: (Int) => C): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "scala\/group\/instance\/Permutation.html#andThen[C](k:B=>C):PartialFunction[A,C]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: PartialFunction[A1, B1]): PartialFunction[A1, B1]", "member" : "scala.PartialFunction.orElse", "link" : "scala\/group\/instance\/Permutation.html#orElse[A1<:A,B1>:B](that:PartialFunction[A1,B1]):PartialFunction[A1,B1]", "kind" : "def"}, {"label" : "elementWise", "tail" : "(): ElementWiseExtractor[Int, Int]", "member" : "scala.PartialFunction.elementWise", "link" : "scala\/group\/instance\/Permutation.html#elementWise:PartialFunction.ElementWiseExtractor[A,B]", "kind" : "def"}, {"label" : "unapply", "tail" : "(a: Int): Option[Int]", "member" : "scala.PartialFunction.unapply", "link" : "scala\/group\/instance\/Permutation.html#unapply(a:A):Option[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Int): (A) => Int", "member" : "scala.Function1.compose", "link" : "scala\/group\/instance\/Permutation.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "iterableFactory", "tail" : "(): IterableFactory[collection.immutable.Iterable]", "member" : "scala.collection.immutable.Iterable.iterableFactory", "link" : "scala\/group\/instance\/Permutation.html#iterableFactory:scala.collection.IterableFactory[scala.collection.immutable.Iterable]", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: collection.Iterable[B]): LazyZip2[(Int, Int), B, Permutation.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "scala\/group\/instance\/Permutation.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "scala\/group\/instance\/Permutation.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): Permutation.this.type", "member" : "scala.collection.Iterable.seq", "link" : "scala\/group\/instance\/Permutation.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "coll", "tail" : "(): Permutation.this.type", "member" : "scala.collection.Iterable.coll", "link" : "scala\/group\/instance\/Permutation.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): Permutation.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "scala\/group\/instance\/Permutation.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "++:", "tail" : "(that: collection.IterableOnce[B]): collection.immutable.Iterable[B]", "member" : "scala.collection.IterableOps.++:", "link" : "scala\/group\/instance\/Permutation.html#++:[B>:A](that:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: ((Int, Int)) => U): Map[Int, Int]", "member" : "scala.collection.IterableOps.tapEach", "link" : "scala\/group\/instance\/Permutation.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "inits", "tail" : "(): collection.Iterator[Map[Int, Int]]", "member" : "scala.collection.IterableOps.inits", "link" : "scala\/group\/instance\/Permutation.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): collection.Iterator[Map[Int, Int]]", "member" : "scala.collection.IterableOps.tails", "link" : "scala\/group\/instance\/Permutation.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: ((Int, Int)) => (A1, A2, A3)): (collection.immutable.Iterable[A1], collection.immutable.Iterable[A2], collection.immutable.Iterable[A3])", "member" : "scala.collection.IterableOps.unzip3", "link" : "scala\/group\/instance\/Permutation.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: ((Int, Int)) => (A1, A2)): (collection.immutable.Iterable[A1], collection.immutable.Iterable[A2])", "member" : "scala.collection.IterableOps.unzip", "link" : "scala\/group\/instance\/Permutation.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: collection.Iterable[B], thisElem: A1, thatElem: B): collection.immutable.Iterable[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "scala\/group\/instance\/Permutation.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): collection.immutable.Iterable[((Int, Int), Int)]", "member" : "scala.collection.IterableOps.zipWithIndex", "link" : "scala\/group\/instance\/Permutation.html#zipWithIndex:CC[(A@scala.annotation.unchecked.uncheckedVariance,Int)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: collection.IterableOnce[B]): collection.immutable.Iterable[((Int, Int), B)]", "member" : "scala.collection.IterableOps.zip", "link" : "scala\/group\/instance\/Permutation.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: collection.IterableOnce[B]): collection.immutable.Iterable[B]", "member" : "scala.collection.IterableOps.++", "link" : "scala\/group\/instance\/Permutation.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: collection.IterableOnce[B]): collection.immutable.Iterable[B]", "member" : "scala.collection.IterableOps.concat", "link" : "scala\/group\/instance\/Permutation.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(f: ((Int, Int)) => Either[A1, A2]): (collection.immutable.Iterable[A1], collection.immutable.Iterable[A2])", "member" : "scala.collection.IterableOps.partitionMap", "link" : "scala\/group\/instance\/Permutation.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[(Int, Int), B]): collection.immutable.Iterable[B]", "member" : "scala.collection.IterableOps.collect", "link" : "scala\/group\/instance\/Permutation.html#collect[B](pf:PartialFunction[A,B]):CC[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asIterable: ((Int, Int)) => collection.IterableOnce[B]): collection.immutable.Iterable[B]", "member" : "scala.collection.IterableOps.flatten", "link" : "scala\/group\/instance\/Permutation.html#flatten[B](implicitasIterable:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((Int, Int)) => collection.IterableOnce[B]): collection.immutable.Iterable[B]", "member" : "scala.collection.IterableOps.flatMap", "link" : "scala\/group\/instance\/Permutation.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((Int, Int)) => B): collection.immutable.Iterable[B]", "member" : "scala.collection.IterableOps.map", "link" : "scala\/group\/instance\/Permutation.html#map[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: ((Int, Int), B) => B): collection.immutable.Iterable[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "scala\/group\/instance\/Permutation.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, (Int, Int)) => B): collection.immutable.Iterable[B]", "member" : "scala.collection.IterableOps.scanLeft", "link" : "scala\/group\/instance\/Permutation.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): collection.immutable.Iterable[B]", "member" : "scala.collection.IterableOps.scan", "link" : "scala\/group\/instance\/Permutation.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: ((Int, Int)) => K)(f: ((Int, Int)) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "scala\/group\/instance\/Permutation.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: ((Int, Int)) => K)(f: ((Int, Int)) => B): Map[K, collection.immutable.Iterable[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "scala\/group\/instance\/Permutation.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((Int, Int)) => K): Map[K, Map[Int, Int]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "scala\/group\/instance\/Permutation.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Map[Int, Int]", "member" : "scala.collection.IterableOps.slice", "link" : "scala\/group\/instance\/Permutation.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "init", "tail" : "(): Map[Int, Int]", "member" : "scala.collection.IterableOps.init", "link" : "scala\/group\/instance\/Permutation.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): Map[Int, Int]", "member" : "scala.collection.IterableOps.tail", "link" : "scala\/group\/instance\/Permutation.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): collection.Iterator[Map[Int, Int]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/instance\/Permutation.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): collection.Iterator[Map[Int, Int]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/instance\/Permutation.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): collection.Iterator[Map[Int, Int]]", "member" : "scala.collection.IterableOps.grouped", "link" : "scala\/group\/instance\/Permutation.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: ((Int, Int)) => Boolean): Map[Int, Int]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "scala\/group\/instance\/Permutation.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Map[Int, Int]", "member" : "scala.collection.IterableOps.dropRight", "link" : "scala\/group\/instance\/Permutation.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Map[Int, Int]", "member" : "scala.collection.IterableOps.drop", "link" : "scala\/group\/instance\/Permutation.html#drop(n:Int):C", "kind" : "def"}, {"label" : "span", "tail" : "(p: ((Int, Int)) => Boolean): (Map[Int, Int], Map[Int, Int])", "member" : "scala.collection.IterableOps.span", "link" : "scala\/group\/instance\/Permutation.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: ((Int, Int)) => Boolean): Map[Int, Int]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "scala\/group\/instance\/Permutation.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Map[Int, Int]", "member" : "scala.collection.IterableOps.takeRight", "link" : "scala\/group\/instance\/Permutation.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Map[Int, Int]", "member" : "scala.collection.IterableOps.take", "link" : "scala\/group\/instance\/Permutation.html#take(n:Int):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Map[Int, Int], Map[Int, Int])", "member" : "scala.collection.IterableOps.splitAt", "link" : "scala\/group\/instance\/Permutation.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: ((Int, Int)) => Boolean): (Map[Int, Int], Map[Int, Int])", "member" : "scala.collection.IterableOps.partition", "link" : "scala\/group\/instance\/Permutation.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: ((Int, Int)) => Boolean): Map[Int, Int]", "member" : "scala.collection.IterableOps.filterNot", "link" : "scala\/group\/instance\/Permutation.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: ((Int, Int)) => Boolean): Map[Int, Int]", "member" : "scala.collection.IterableOps.filter", "link" : "scala\/group\/instance\/Permutation.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: ((Int, Int)) => collection.Iterable[B]): collection.immutable.Iterable[collection.immutable.Iterable[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "scala\/group\/instance\/Permutation.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): View[(Int, Int)]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/instance\/Permutation.html#view(from:Int,until:Int):scala.collection.View[A]", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(that: collection.Iterable[_]): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/instance\/Permutation.html#sizeCompare(that:Iterable[_]):Int", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "scala\/group\/instance\/Permutation.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/instance\/Permutation.html#sizeCompare(otherSize:Int):Int", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[(Int, Int)]", "member" : "scala.collection.IterableOps.lastOption", "link" : "scala\/group\/instance\/Permutation.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): (Int, Int)", "member" : "scala.collection.IterableOps.last", "link" : "scala\/group\/instance\/Permutation.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[(Int, Int)]", "member" : "scala.collection.IterableOps.headOption", "link" : "scala\/group\/instance\/Permutation.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): (Int, Int)", "member" : "scala.collection.IterableOps.head", "link" : "scala\/group\/instance\/Permutation.html#head:A", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[[_]collection.immutable.Iterable[_]]", "member" : "scala.collection.IterableOps.companion", "link" : "scala\/group\/instance\/Permutation.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): Map[Int, Int]", "member" : "scala.collection.IterableOps.repr", "link" : "scala\/group\/instance\/Permutation.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "scala\/group\/instance\/Permutation.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): collection.Traversable[(Int, Int)]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "scala\/group\/instance\/Permutation.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): collection.Iterable[(Int, Int)]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "scala\/group\/instance\/Permutation.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "scala\/group\/instance\/Permutation.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "scala\/group\/instance\/Permutation.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): collection.immutable.Stream[(Int, Int)]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "scala\/group\/instance\/Permutation.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): collection.immutable.IndexedSeq[(Int, Int)]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "scala\/group\/instance\/Permutation.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): collection.immutable.Seq[(Int, Int)]", "member" : "scala.collection.IterableOnceOps.toSeq", "link" : "scala\/group\/instance\/Permutation.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "scala\/group\/instance\/Permutation.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): collection.immutable.Vector[(Int, Int)]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "scala\/group\/instance\/Permutation.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): collection.immutable.List[(Int, Int)]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "scala\/group\/instance\/Permutation.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): collection.Iterator[(Int, Int)]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "scala\/group\/instance\/Permutation.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[(Int, Int), C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "scala\/group\/instance\/Permutation.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/instance\/Permutation.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, sep: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/instance\/Permutation.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/instance\/Permutation.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/instance\/Permutation.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/instance\/Permutation.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: collection.IterableOnce[B])(p: ((Int, Int), B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "scala\/group\/instance\/Permutation.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, (Int, Int)) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "scala\/group\/instance\/Permutation.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[(Int, Int), B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "scala\/group\/instance\/Permutation.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: ((Int, Int)) => B)(cmp: math.Ordering[B]): Option[(Int, Int)]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "scala\/group\/instance\/Permutation.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: ((Int, Int)) => B)(cmp: math.Ordering[B]): (Int, Int)", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "scala\/group\/instance\/Permutation.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: ((Int, Int)) => B)(cmp: math.Ordering[B]): Option[(Int, Int)]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "scala\/group\/instance\/Permutation.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: ((Int, Int)) => B)(cmp: math.Ordering[B]): (Int, Int)", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "scala\/group\/instance\/Permutation.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: math.Ordering[B]): Option[(Int, Int)]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "scala\/group\/instance\/Permutation.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: math.Ordering[B]): (Int, Int)", "member" : "scala.collection.IterableOnceOps.max", "link" : "scala\/group\/instance\/Permutation.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: math.Ordering[B]): Option[(Int, Int)]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "scala\/group\/instance\/Permutation.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: math.Ordering[B]): (Int, Int)", "member" : "scala.collection.IterableOnceOps.min", "link" : "scala\/group\/instance\/Permutation.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "scala\/group\/instance\/Permutation.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "scala\/group\/instance\/Permutation.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/instance\/Permutation.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/instance\/Permutation.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/instance\/Permutation.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "scala\/group\/instance\/Permutation.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.IterableOnceOps.size", "link" : "scala\/group\/instance\/Permutation.html#size:Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "scala\/group\/instance\/Permutation.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.isEmpty", "link" : "scala\/group\/instance\/Permutation.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: ((Int, Int), B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "scala\/group\/instance\/Permutation.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, (Int, Int)) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "scala\/group\/instance\/Permutation.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: ((Int, Int), B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "scala\/group\/instance\/Permutation.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, (Int, Int)) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "scala\/group\/instance\/Permutation.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "scala\/group\/instance\/Permutation.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "scala\/group\/instance\/Permutation.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "scala\/group\/instance\/Permutation.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: ((Int, Int), B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "scala\/group\/instance\/Permutation.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, (Int, Int)) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "scala\/group\/instance\/Permutation.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: ((Int, Int), B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "scala\/group\/instance\/Permutation.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, (Int, Int)) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "scala\/group\/instance\/Permutation.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: ((Int, Int)) => Boolean): Option[(Int, Int)]", "member" : "scala.collection.IterableOnceOps.find", "link" : "scala\/group\/instance\/Permutation.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: ((Int, Int)) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "scala\/group\/instance\/Permutation.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: ((Int, Int)) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "scala\/group\/instance\/Permutation.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: ((Int, Int)) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "scala\/group\/instance\/Permutation.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((Int, Int)) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "scala\/group\/instance\/Permutation.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "scala\/group\/instance\/Permutation.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "scala\/group\/instance\/Permutation.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[(Int, Int), S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "scala\/group\/instance\/Permutation.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/instance\/Permutation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/instance\/Permutation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/instance\/Permutation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/instance\/Permutation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/instance\/Permutation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/instance\/Permutation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/instance\/Permutation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Permutation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Permutation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Permutation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/instance\/Permutation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/instance\/Permutation.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/instance\/Permutation.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/instance\/Permutation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/instance\/Permutation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/instance\/Permutation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "permutations", "tail" : "(n: Int): Iterator[Permutation]", "member" : "scala.group.instance.Permutation.permutations", "link" : "scala\/group\/instance\/Permutation$.html#permutations(n:Int):Iterator[scala.group.instance.Permutation]", "kind" : "def"}, {"label" : "transposition", "tail" : "(a: Int, b: Int): Permutation", "member" : "scala.group.instance.Permutation.transposition", "link" : "scala\/group\/instance\/Permutation$.html#transposition(a:Int,b:Int):scala.group.instance.Permutation", "kind" : "def"}, {"label" : "cycle", "tail" : "(xs: Int*): Permutation", "member" : "scala.group.instance.Permutation.cycle", "link" : "scala\/group\/instance\/Permutation$.html#cycle(xs:Int*):scala.group.instance.Permutation", "kind" : "def"}, {"label" : "empty", "tail" : ": Permutation", "member" : "scala.group.instance.Permutation.empty", "link" : "scala\/group\/instance\/Permutation$.html#empty:scala.group.instance.Permutation", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/instance\/Permutation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/instance\/Permutation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/instance\/Permutation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/instance\/Permutation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/instance\/Permutation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/instance\/Permutation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/instance\/Permutation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Permutation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Permutation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Permutation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/instance\/Permutation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/instance\/Permutation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scala\/group\/instance\/Permutation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/instance\/Permutation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/instance\/Permutation$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/instance\/Permutation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/instance\/Permutation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/instance\/Permutation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/instance\/Permutation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scala\/group\/instance\/Permutation.html", "kind" : "class"}, {"name" : "scala.group.instance.Q", "shortDescription" : "", "object" : "scala\/group\/instance\/Q$.html", "members_object" : [{"label" : "Subgroup", "tail" : "", "member" : "scala.group.Group.Subgroup", "link" : "scala\/group\/Group.html#SubgroupextendsGroup[A]withSet[A]", "kind" : "trait"}, {"label" : "contains", "tail" : "(x: Rational): Boolean", "member" : "scala.group.instance.Q.contains", "link" : "scala\/group\/instance\/Q$.html#contains(x:Rational):Boolean", "kind" : "def"}, {"label" : "iterator", "tail" : "(): collection.Iterator[Rational]", "member" : "scala.group.instance.Q.iterator", "link" : "scala\/group\/instance\/Q$.html#iterator:Iterator[Rational]", "kind" : "def"}, {"label" : "op", "tail" : "(x: Rational, y: Rational): Rational", "member" : "scala.group.instance.Q.op", "link" : "scala\/group\/instance\/Q$.html#op(x:Rational,y:Rational):Rational", "kind" : "def"}, {"label" : "inv", "tail" : "(x: Rational): Rational", "member" : "scala.group.instance.Q.inv", "link" : "scala\/group\/instance\/Q$.html#inv(x:Rational):Rational", "kind" : "def"}, {"label" : "id", "tail" : ": Rational", "member" : "scala.group.instance.Q.id", "link" : "scala\/group\/instance\/Q$.html#id:Rational", "kind" : "val"}, {"label" : "printCayleyTable", "tail" : "(n: Int): Unit", "member" : "scala.group.InfiniteGroup.printCayleyTable", "link" : "scala\/group\/instance\/Q$.html#printCayleyTable(n:Int):Unit", "kind" : "def"}, {"label" : "finite", "tail" : ": Boolean(false)", "member" : "scala.group.InfiniteGroup.finite", "link" : "scala\/group\/instance\/Q$.html#finite:Boolean(false)", "kind" : "final val"}, {"label" : "biject", "tail" : "(bi: Bijection[Rational, B]): Group[B]", "member" : "scala.group.Group.biject", "link" : "scala\/group\/instance\/Q$.html#biject[B](bi:scala.group.Bijection[A,B]):scala.group.Group[B]", "kind" : "def"}, {"label" : "order", "tail" : "(x: Rational): Int", "member" : "scala.group.Group.order", "link" : "scala\/group\/instance\/Q$.html#order(x:A):Int", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: collection.Iterable[B]): LazyZip2[Rational, B, Q.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "scala\/group\/instance\/Q$.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterable.toString", "link" : "scala\/group\/instance\/Q$.html#toString():String", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.Iterable.stringPrefix", "link" : "scala\/group\/instance\/Q$.html#stringPrefix:String", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "scala\/group\/instance\/Q$.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): Q.this.type", "member" : "scala.collection.Iterable.seq", "link" : "scala\/group\/instance\/Q$.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "iterableFactory", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.Iterable.iterableFactory", "link" : "scala\/group\/instance\/Q$.html#iterableFactory:scala.collection.IterableFactory[Iterable]", "kind" : "def"}, {"label" : "coll", "tail" : "(): Q.this.type", "member" : "scala.collection.Iterable.coll", "link" : "scala\/group\/instance\/Q$.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): Q.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "scala\/group\/instance\/Q$.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): collection.Iterable[Rational]", "member" : "scala.collection.IterableFactoryDefaults.empty", "link" : "scala\/group\/instance\/Q$.html#empty:CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[Rational, collection.Iterable[Rational]]", "member" : "scala.collection.IterableFactoryDefaults.newSpecificBuilder", "link" : "scala\/group\/instance\/Q$.html#newSpecificBuilder:scala.collection.mutable.Builder[A@scala.annotation.unchecked.uncheckedVariance,CC[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: collection.IterableOnce[Rational]): collection.Iterable[Rational]", "member" : "scala.collection.IterableFactoryDefaults.fromSpecific", "link" : "scala\/group\/instance\/Q$.html#fromSpecific(coll:scala.collection.IterableOnce[A@scala.annotation.unchecked.uncheckedVariance]):CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "++:", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++:", "link" : "scala\/group\/instance\/Q$.html#++:[B>:A](that:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (Rational) => U): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.tapEach", "link" : "scala\/group\/instance\/Q$.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "inits", "tail" : "(): collection.Iterator[collection.Iterable[Rational]]", "member" : "scala.collection.IterableOps.inits", "link" : "scala\/group\/instance\/Q$.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): collection.Iterator[collection.Iterable[Rational]]", "member" : "scala.collection.IterableOps.tails", "link" : "scala\/group\/instance\/Q$.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Rational) => (A1, A2, A3)): (collection.Iterable[A1], collection.Iterable[A2], collection.Iterable[A3])", "member" : "scala.collection.IterableOps.unzip3", "link" : "scala\/group\/instance\/Q$.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Rational) => (A1, A2)): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.unzip", "link" : "scala\/group\/instance\/Q$.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: collection.Iterable[B], thisElem: A1, thatElem: B): collection.Iterable[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "scala\/group\/instance\/Q$.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): collection.Iterable[(Rational, Int)]", "member" : "scala.collection.IterableOps.zipWithIndex", "link" : "scala\/group\/instance\/Q$.html#zipWithIndex:CC[(A@scala.annotation.unchecked.uncheckedVariance,Int)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[(Rational, B)]", "member" : "scala.collection.IterableOps.zip", "link" : "scala\/group\/instance\/Q$.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++", "link" : "scala\/group\/instance\/Q$.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.concat", "link" : "scala\/group\/instance\/Q$.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(f: (Rational) => Either[A1, A2]): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.partitionMap", "link" : "scala\/group\/instance\/Q$.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Rational, B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.collect", "link" : "scala\/group\/instance\/Q$.html#collect[B](pf:PartialFunction[A,B]):CC[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asIterable: (Rational) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatten", "link" : "scala\/group\/instance\/Q$.html#flatten[B](implicitasIterable:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Rational) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatMap", "link" : "scala\/group\/instance\/Q$.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Rational) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.map", "link" : "scala\/group\/instance\/Q$.html#map[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Rational, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "scala\/group\/instance\/Q$.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Rational) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanLeft", "link" : "scala\/group\/instance\/Q$.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scan", "link" : "scala\/group\/instance\/Q$.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: (Rational) => K)(f: (Rational) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "scala\/group\/instance\/Q$.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: (Rational) => K)(f: (Rational) => B): Map[K, collection.Iterable[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "scala\/group\/instance\/Q$.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Rational) => K): Map[K, collection.Iterable[Rational]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "scala\/group\/instance\/Q$.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.slice", "link" : "scala\/group\/instance\/Q$.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "init", "tail" : "(): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.init", "link" : "scala\/group\/instance\/Q$.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.tail", "link" : "scala\/group\/instance\/Q$.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): collection.Iterator[collection.Iterable[Rational]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/instance\/Q$.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): collection.Iterator[collection.Iterable[Rational]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/instance\/Q$.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): collection.Iterator[collection.Iterable[Rational]]", "member" : "scala.collection.IterableOps.grouped", "link" : "scala\/group\/instance\/Q$.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Rational) => Boolean): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "scala\/group\/instance\/Q$.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.dropRight", "link" : "scala\/group\/instance\/Q$.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.drop", "link" : "scala\/group\/instance\/Q$.html#drop(n:Int):C", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Rational) => Boolean): (collection.Iterable[Rational], collection.Iterable[Rational])", "member" : "scala.collection.IterableOps.span", "link" : "scala\/group\/instance\/Q$.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Rational) => Boolean): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "scala\/group\/instance\/Q$.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.takeRight", "link" : "scala\/group\/instance\/Q$.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.take", "link" : "scala\/group\/instance\/Q$.html#take(n:Int):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (collection.Iterable[Rational], collection.Iterable[Rational])", "member" : "scala.collection.IterableOps.splitAt", "link" : "scala\/group\/instance\/Q$.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Rational) => Boolean): (collection.Iterable[Rational], collection.Iterable[Rational])", "member" : "scala.collection.IterableOps.partition", "link" : "scala\/group\/instance\/Q$.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Rational) => Boolean): WithFilter[Rational, collection.Iterable]", "member" : "scala.collection.IterableOps.withFilter", "link" : "scala\/group\/instance\/Q$.html#withFilter(p:A=>Boolean):scala.collection.WithFilter[A,CC]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (Rational) => Boolean): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.filterNot", "link" : "scala\/group\/instance\/Q$.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (Rational) => Boolean): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.filter", "link" : "scala\/group\/instance\/Q$.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: (Rational) => collection.Iterable[B]): collection.Iterable[collection.Iterable[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "scala\/group\/instance\/Q$.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): View[Rational]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/instance\/Q$.html#view(from:Int,until:Int):scala.collection.View[A]", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(that: collection.Iterable[_]): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/instance\/Q$.html#sizeCompare(that:Iterable[_]):Int", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "scala\/group\/instance\/Q$.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/instance\/Q$.html#sizeCompare(otherSize:Int):Int", "kind" : "def"}, {"label" : "view", "tail" : "(): View[Rational]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/instance\/Q$.html#view:scala.collection.View[A]", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[Rational]", "member" : "scala.collection.IterableOps.lastOption", "link" : "scala\/group\/instance\/Q$.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Rational", "member" : "scala.collection.IterableOps.last", "link" : "scala\/group\/instance\/Q$.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Rational]", "member" : "scala.collection.IterableOps.headOption", "link" : "scala\/group\/instance\/Q$.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): Rational", "member" : "scala.collection.IterableOps.head", "link" : "scala\/group\/instance\/Q$.html#head:A", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.IterableOps.companion", "link" : "scala\/group\/instance\/Q$.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.repr", "link" : "scala\/group\/instance\/Q$.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "scala\/group\/instance\/Q$.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): collection.Traversable[Rational]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "scala\/group\/instance\/Q$.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): collection.Iterable[Rational]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "scala\/group\/instance\/Q$.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "scala\/group\/instance\/Q$.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "scala\/group\/instance\/Q$.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): collection.immutable.Stream[Rational]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "scala\/group\/instance\/Q$.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): collection.immutable.IndexedSeq[Rational]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "scala\/group\/instance\/Q$.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): collection.immutable.Seq[Rational]", "member" : "scala.collection.IterableOnceOps.toSeq", "link" : "scala\/group\/instance\/Q$.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "scala\/group\/instance\/Q$.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Rational, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "scala\/group\/instance\/Q$.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): collection.immutable.Vector[Rational]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "scala\/group\/instance\/Q$.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): collection.immutable.List[Rational]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "scala\/group\/instance\/Q$.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): collection.Iterator[Rational]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "scala\/group\/instance\/Q$.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[Rational, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "scala\/group\/instance\/Q$.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/instance\/Q$.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, sep: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/instance\/Q$.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, start: String, sep: String, end: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/instance\/Q$.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/instance\/Q$.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/instance\/Q$.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/instance\/Q$.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: collection.IterableOnce[B])(p: (Rational, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "scala\/group\/instance\/Q$.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, Rational) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "scala\/group\/instance\/Q$.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Rational, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "scala\/group\/instance\/Q$.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (Rational) => B)(cmp: math.Ordering[B]): Option[Rational]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "scala\/group\/instance\/Q$.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Rational) => B)(cmp: math.Ordering[B]): Rational", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "scala\/group\/instance\/Q$.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (Rational) => B)(cmp: math.Ordering[B]): Option[Rational]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "scala\/group\/instance\/Q$.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Rational) => B)(cmp: math.Ordering[B]): Rational", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "scala\/group\/instance\/Q$.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: math.Ordering[B]): Option[Rational]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "scala\/group\/instance\/Q$.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: math.Ordering[B]): Rational", "member" : "scala.collection.IterableOnceOps.max", "link" : "scala\/group\/instance\/Q$.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: math.Ordering[B]): Option[Rational]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "scala\/group\/instance\/Q$.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: math.Ordering[B]): Rational", "member" : "scala.collection.IterableOnceOps.min", "link" : "scala\/group\/instance\/Q$.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "scala\/group\/instance\/Q$.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "scala\/group\/instance\/Q$.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/instance\/Q$.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/instance\/Q$.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/instance\/Q$.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "scala\/group\/instance\/Q$.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.IterableOnceOps.size", "link" : "scala\/group\/instance\/Q$.html#size:Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "scala\/group\/instance\/Q$.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.isEmpty", "link" : "scala\/group\/instance\/Q$.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Rational, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "scala\/group\/instance\/Q$.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Rational) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "scala\/group\/instance\/Q$.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Rational, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "scala\/group\/instance\/Q$.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Rational) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "scala\/group\/instance\/Q$.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "scala\/group\/instance\/Q$.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "scala\/group\/instance\/Q$.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "scala\/group\/instance\/Q$.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Rational, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "scala\/group\/instance\/Q$.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Rational) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "scala\/group\/instance\/Q$.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Rational, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "scala\/group\/instance\/Q$.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Rational) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "scala\/group\/instance\/Q$.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Rational) => Boolean): Option[Rational]", "member" : "scala.collection.IterableOnceOps.find", "link" : "scala\/group\/instance\/Q$.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Rational) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "scala\/group\/instance\/Q$.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Rational) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "scala\/group\/instance\/Q$.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Rational) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "scala\/group\/instance\/Q$.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Rational) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "scala\/group\/instance\/Q$.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "scala\/group\/instance\/Q$.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "scala\/group\/instance\/Q$.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[Rational, S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "scala\/group\/instance\/Q$.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/instance\/Q$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/instance\/Q$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/instance\/Q$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/instance\/Q$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/instance\/Q$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/instance\/Q$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/instance\/Q$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Q$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Q$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Q$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/instance\/Q$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/instance\/Q$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/instance\/Q$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/instance\/Q$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/instance\/Q$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/instance\/Q$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/instance\/Q$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/instance\/Q$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "scala.group.instance.Q$N", "shortDescription" : "", "object" : "scala\/group\/instance\/Q$N$.html", "members_object" : [{"label" : "Subgroup", "tail" : "", "member" : "scala.group.Group.Subgroup", "link" : "scala\/group\/Group.html#SubgroupextendsGroup[A]withSet[A]", "kind" : "trait"}, {"label" : "contains", "tail" : "(x: Rational): Boolean", "member" : "scala.group.instance.Q$N.contains", "link" : "scala\/group\/instance\/Q$N$.html#contains(x:Rational):Boolean", "kind" : "def"}, {"label" : "iterator", "tail" : "(): collection.Iterator[Rational]", "member" : "scala.group.instance.Q$N.iterator", "link" : "scala\/group\/instance\/Q$N$.html#iterator:Iterator[Rational]", "kind" : "def"}, {"label" : "op", "tail" : "(x: Rational, y: Rational): Rational", "member" : "scala.group.instance.Q$N.op", "link" : "scala\/group\/instance\/Q$N$.html#op(x:Rational,y:Rational):Rational", "kind" : "def"}, {"label" : "inv", "tail" : "(x: Rational): Rational", "member" : "scala.group.instance.Q$N.inv", "link" : "scala\/group\/instance\/Q$N$.html#inv(x:Rational):Rational", "kind" : "def"}, {"label" : "id", "tail" : ": Rational", "member" : "scala.group.instance.Q$N.id", "link" : "scala\/group\/instance\/Q$N$.html#id:Rational", "kind" : "val"}, {"label" : "printCayleyTable", "tail" : "(n: Int): Unit", "member" : "scala.group.InfiniteGroup.printCayleyTable", "link" : "scala\/group\/instance\/Q$N$.html#printCayleyTable(n:Int):Unit", "kind" : "def"}, {"label" : "finite", "tail" : ": Boolean(false)", "member" : "scala.group.InfiniteGroup.finite", "link" : "scala\/group\/instance\/Q$N$.html#finite:Boolean(false)", "kind" : "final val"}, {"label" : "biject", "tail" : "(bi: Bijection[Rational, B]): Group[B]", "member" : "scala.group.Group.biject", "link" : "scala\/group\/instance\/Q$N$.html#biject[B](bi:scala.group.Bijection[A,B]):scala.group.Group[B]", "kind" : "def"}, {"label" : "order", "tail" : "(x: Rational): Int", "member" : "scala.group.Group.order", "link" : "scala\/group\/instance\/Q$N$.html#order(x:A):Int", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: collection.Iterable[B]): LazyZip2[Rational, B, Q$N.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "scala\/group\/instance\/Q$N$.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterable.toString", "link" : "scala\/group\/instance\/Q$N$.html#toString():String", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.Iterable.stringPrefix", "link" : "scala\/group\/instance\/Q$N$.html#stringPrefix:String", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "scala\/group\/instance\/Q$N$.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): Q$N.this.type", "member" : "scala.collection.Iterable.seq", "link" : "scala\/group\/instance\/Q$N$.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "iterableFactory", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.Iterable.iterableFactory", "link" : "scala\/group\/instance\/Q$N$.html#iterableFactory:scala.collection.IterableFactory[Iterable]", "kind" : "def"}, {"label" : "coll", "tail" : "(): Q$N.this.type", "member" : "scala.collection.Iterable.coll", "link" : "scala\/group\/instance\/Q$N$.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): Q$N.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "scala\/group\/instance\/Q$N$.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): collection.Iterable[Rational]", "member" : "scala.collection.IterableFactoryDefaults.empty", "link" : "scala\/group\/instance\/Q$N$.html#empty:CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[Rational, collection.Iterable[Rational]]", "member" : "scala.collection.IterableFactoryDefaults.newSpecificBuilder", "link" : "scala\/group\/instance\/Q$N$.html#newSpecificBuilder:scala.collection.mutable.Builder[A@scala.annotation.unchecked.uncheckedVariance,CC[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: collection.IterableOnce[Rational]): collection.Iterable[Rational]", "member" : "scala.collection.IterableFactoryDefaults.fromSpecific", "link" : "scala\/group\/instance\/Q$N$.html#fromSpecific(coll:scala.collection.IterableOnce[A@scala.annotation.unchecked.uncheckedVariance]):CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "++:", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++:", "link" : "scala\/group\/instance\/Q$N$.html#++:[B>:A](that:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (Rational) => U): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.tapEach", "link" : "scala\/group\/instance\/Q$N$.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "inits", "tail" : "(): collection.Iterator[collection.Iterable[Rational]]", "member" : "scala.collection.IterableOps.inits", "link" : "scala\/group\/instance\/Q$N$.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): collection.Iterator[collection.Iterable[Rational]]", "member" : "scala.collection.IterableOps.tails", "link" : "scala\/group\/instance\/Q$N$.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Rational) => (A1, A2, A3)): (collection.Iterable[A1], collection.Iterable[A2], collection.Iterable[A3])", "member" : "scala.collection.IterableOps.unzip3", "link" : "scala\/group\/instance\/Q$N$.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Rational) => (A1, A2)): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.unzip", "link" : "scala\/group\/instance\/Q$N$.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: collection.Iterable[B], thisElem: A1, thatElem: B): collection.Iterable[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "scala\/group\/instance\/Q$N$.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): collection.Iterable[(Rational, Int)]", "member" : "scala.collection.IterableOps.zipWithIndex", "link" : "scala\/group\/instance\/Q$N$.html#zipWithIndex:CC[(A@scala.annotation.unchecked.uncheckedVariance,Int)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[(Rational, B)]", "member" : "scala.collection.IterableOps.zip", "link" : "scala\/group\/instance\/Q$N$.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++", "link" : "scala\/group\/instance\/Q$N$.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.concat", "link" : "scala\/group\/instance\/Q$N$.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(f: (Rational) => Either[A1, A2]): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.partitionMap", "link" : "scala\/group\/instance\/Q$N$.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Rational, B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.collect", "link" : "scala\/group\/instance\/Q$N$.html#collect[B](pf:PartialFunction[A,B]):CC[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asIterable: (Rational) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatten", "link" : "scala\/group\/instance\/Q$N$.html#flatten[B](implicitasIterable:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Rational) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatMap", "link" : "scala\/group\/instance\/Q$N$.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Rational) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.map", "link" : "scala\/group\/instance\/Q$N$.html#map[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Rational, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "scala\/group\/instance\/Q$N$.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Rational) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanLeft", "link" : "scala\/group\/instance\/Q$N$.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scan", "link" : "scala\/group\/instance\/Q$N$.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: (Rational) => K)(f: (Rational) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "scala\/group\/instance\/Q$N$.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: (Rational) => K)(f: (Rational) => B): Map[K, collection.Iterable[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "scala\/group\/instance\/Q$N$.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Rational) => K): Map[K, collection.Iterable[Rational]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "scala\/group\/instance\/Q$N$.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.slice", "link" : "scala\/group\/instance\/Q$N$.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "init", "tail" : "(): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.init", "link" : "scala\/group\/instance\/Q$N$.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.tail", "link" : "scala\/group\/instance\/Q$N$.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): collection.Iterator[collection.Iterable[Rational]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/instance\/Q$N$.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): collection.Iterator[collection.Iterable[Rational]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/instance\/Q$N$.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): collection.Iterator[collection.Iterable[Rational]]", "member" : "scala.collection.IterableOps.grouped", "link" : "scala\/group\/instance\/Q$N$.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Rational) => Boolean): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "scala\/group\/instance\/Q$N$.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.dropRight", "link" : "scala\/group\/instance\/Q$N$.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.drop", "link" : "scala\/group\/instance\/Q$N$.html#drop(n:Int):C", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Rational) => Boolean): (collection.Iterable[Rational], collection.Iterable[Rational])", "member" : "scala.collection.IterableOps.span", "link" : "scala\/group\/instance\/Q$N$.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Rational) => Boolean): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "scala\/group\/instance\/Q$N$.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.takeRight", "link" : "scala\/group\/instance\/Q$N$.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.take", "link" : "scala\/group\/instance\/Q$N$.html#take(n:Int):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (collection.Iterable[Rational], collection.Iterable[Rational])", "member" : "scala.collection.IterableOps.splitAt", "link" : "scala\/group\/instance\/Q$N$.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Rational) => Boolean): (collection.Iterable[Rational], collection.Iterable[Rational])", "member" : "scala.collection.IterableOps.partition", "link" : "scala\/group\/instance\/Q$N$.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Rational) => Boolean): WithFilter[Rational, collection.Iterable]", "member" : "scala.collection.IterableOps.withFilter", "link" : "scala\/group\/instance\/Q$N$.html#withFilter(p:A=>Boolean):scala.collection.WithFilter[A,CC]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (Rational) => Boolean): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.filterNot", "link" : "scala\/group\/instance\/Q$N$.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (Rational) => Boolean): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.filter", "link" : "scala\/group\/instance\/Q$N$.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: (Rational) => collection.Iterable[B]): collection.Iterable[collection.Iterable[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "scala\/group\/instance\/Q$N$.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): View[Rational]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/instance\/Q$N$.html#view(from:Int,until:Int):scala.collection.View[A]", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(that: collection.Iterable[_]): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/instance\/Q$N$.html#sizeCompare(that:Iterable[_]):Int", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "scala\/group\/instance\/Q$N$.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/instance\/Q$N$.html#sizeCompare(otherSize:Int):Int", "kind" : "def"}, {"label" : "view", "tail" : "(): View[Rational]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/instance\/Q$N$.html#view:scala.collection.View[A]", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[Rational]", "member" : "scala.collection.IterableOps.lastOption", "link" : "scala\/group\/instance\/Q$N$.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Rational", "member" : "scala.collection.IterableOps.last", "link" : "scala\/group\/instance\/Q$N$.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Rational]", "member" : "scala.collection.IterableOps.headOption", "link" : "scala\/group\/instance\/Q$N$.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): Rational", "member" : "scala.collection.IterableOps.head", "link" : "scala\/group\/instance\/Q$N$.html#head:A", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.IterableOps.companion", "link" : "scala\/group\/instance\/Q$N$.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): collection.Iterable[Rational]", "member" : "scala.collection.IterableOps.repr", "link" : "scala\/group\/instance\/Q$N$.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "scala\/group\/instance\/Q$N$.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): collection.Traversable[Rational]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "scala\/group\/instance\/Q$N$.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): collection.Iterable[Rational]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "scala\/group\/instance\/Q$N$.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "scala\/group\/instance\/Q$N$.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "scala\/group\/instance\/Q$N$.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): collection.immutable.Stream[Rational]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "scala\/group\/instance\/Q$N$.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): collection.immutable.IndexedSeq[Rational]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "scala\/group\/instance\/Q$N$.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): collection.immutable.Seq[Rational]", "member" : "scala.collection.IterableOnceOps.toSeq", "link" : "scala\/group\/instance\/Q$N$.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "scala\/group\/instance\/Q$N$.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Rational, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "scala\/group\/instance\/Q$N$.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): collection.immutable.Vector[Rational]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "scala\/group\/instance\/Q$N$.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): collection.immutable.List[Rational]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "scala\/group\/instance\/Q$N$.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): collection.Iterator[Rational]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "scala\/group\/instance\/Q$N$.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[Rational, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "scala\/group\/instance\/Q$N$.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/instance\/Q$N$.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, sep: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/instance\/Q$N$.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, start: String, sep: String, end: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/instance\/Q$N$.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/instance\/Q$N$.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/instance\/Q$N$.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/instance\/Q$N$.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: collection.IterableOnce[B])(p: (Rational, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "scala\/group\/instance\/Q$N$.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, Rational) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "scala\/group\/instance\/Q$N$.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Rational, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "scala\/group\/instance\/Q$N$.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (Rational) => B)(cmp: math.Ordering[B]): Option[Rational]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "scala\/group\/instance\/Q$N$.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Rational) => B)(cmp: math.Ordering[B]): Rational", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "scala\/group\/instance\/Q$N$.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (Rational) => B)(cmp: math.Ordering[B]): Option[Rational]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "scala\/group\/instance\/Q$N$.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Rational) => B)(cmp: math.Ordering[B]): Rational", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "scala\/group\/instance\/Q$N$.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: math.Ordering[B]): Option[Rational]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "scala\/group\/instance\/Q$N$.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: math.Ordering[B]): Rational", "member" : "scala.collection.IterableOnceOps.max", "link" : "scala\/group\/instance\/Q$N$.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: math.Ordering[B]): Option[Rational]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "scala\/group\/instance\/Q$N$.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: math.Ordering[B]): Rational", "member" : "scala.collection.IterableOnceOps.min", "link" : "scala\/group\/instance\/Q$N$.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "scala\/group\/instance\/Q$N$.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "scala\/group\/instance\/Q$N$.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/instance\/Q$N$.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/instance\/Q$N$.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/instance\/Q$N$.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "scala\/group\/instance\/Q$N$.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.IterableOnceOps.size", "link" : "scala\/group\/instance\/Q$N$.html#size:Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "scala\/group\/instance\/Q$N$.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.isEmpty", "link" : "scala\/group\/instance\/Q$N$.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Rational, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "scala\/group\/instance\/Q$N$.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Rational) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "scala\/group\/instance\/Q$N$.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Rational, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "scala\/group\/instance\/Q$N$.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Rational) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "scala\/group\/instance\/Q$N$.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "scala\/group\/instance\/Q$N$.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "scala\/group\/instance\/Q$N$.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "scala\/group\/instance\/Q$N$.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Rational, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "scala\/group\/instance\/Q$N$.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Rational) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "scala\/group\/instance\/Q$N$.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Rational, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "scala\/group\/instance\/Q$N$.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Rational) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "scala\/group\/instance\/Q$N$.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Rational) => Boolean): Option[Rational]", "member" : "scala.collection.IterableOnceOps.find", "link" : "scala\/group\/instance\/Q$N$.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Rational) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "scala\/group\/instance\/Q$N$.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Rational) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "scala\/group\/instance\/Q$N$.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Rational) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "scala\/group\/instance\/Q$N$.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Rational) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "scala\/group\/instance\/Q$N$.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "scala\/group\/instance\/Q$N$.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "scala\/group\/instance\/Q$N$.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[Rational, S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "scala\/group\/instance\/Q$N$.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/instance\/Q$N$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/instance\/Q$N$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/instance\/Q$N$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/instance\/Q$N$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/instance\/Q$N$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/instance\/Q$N$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/instance\/Q$N$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Q$N$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Q$N$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Q$N$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/instance\/Q$N$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/instance\/Q$N$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/instance\/Q$N$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/instance\/Q$N$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/instance\/Q$N$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/instance\/Q$N$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/instance\/Q$N$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/instance\/Q$N$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "scala.group.instance.Sn", "shortDescription" : "", "object" : "scala\/group\/instance\/Sn$.html", "members_object" : [{"label" : "apply", "tail" : "(n: Int): GSymmetry", "member" : "scala.group.instance.Sn.apply", "link" : "scala\/group\/instance\/Sn$.html#apply(n:Int):scala.group.instance.Sn.GSymmetry", "kind" : "def"}, {"label" : "map", "tail" : ": Map[Int, GSymmetry]", "member" : "scala.group.instance.Sn.map", "link" : "scala\/group\/instance\/Sn$.html#map:scala.collection.mutable.Map[Int,scala.group.instance.Sn.GSymmetry]", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "scala\/group\/instance\/Sn$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (FiniteGroup[Permutation]) => A): (Int) => A", "member" : "scala.Function1.andThen", "link" : "scala\/group\/instance\/Sn$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Int): (A) => FiniteGroup[Permutation]", "member" : "scala.Function1.compose", "link" : "scala\/group\/instance\/Sn$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/instance\/Sn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/instance\/Sn$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/instance\/Sn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/instance\/Sn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/instance\/Sn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/instance\/Sn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/instance\/Sn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Sn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Sn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Sn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/instance\/Sn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/instance\/Sn$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/instance\/Sn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/instance\/Sn$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/instance\/Sn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/instance\/Sn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/instance\/Sn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/instance\/Sn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "scala.group.instance.Z", "shortDescription" : "The group of Integers under addition.", "object" : "scala\/group\/instance\/Z$.html", "members_object" : [{"label" : "Subgroup", "tail" : "", "member" : "scala.group.Group.Subgroup", "link" : "scala\/group\/Group.html#SubgroupextendsGroup[A]withSet[A]", "kind" : "trait"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.group.instance.Z.toString", "link" : "scala\/group\/instance\/Z$.html#toString():String", "kind" : "def"}, {"label" : "contains", "tail" : "(x: Int): Boolean", "member" : "scala.group.instance.Z.contains", "link" : "scala\/group\/instance\/Z$.html#contains(x:Int):Boolean", "kind" : "def"}, {"label" : "iterator", "tail" : "(): InfiniteIterator[Int] { ... \/* 2 definitions in type refinement *\/ }", "member" : "scala.group.instance.Z.iterator", "link" : "scala\/group\/instance\/Z$.html#iterator:InfiniteIterator[Int]{defi:Int;defi_=(x$1:Int):Unit}", "kind" : "def"}, {"label" : "op", "tail" : "(x: Int, y: Int): Int", "member" : "scala.group.instance.Z.op", "link" : "scala\/group\/instance\/Z$.html#op(x:Int,y:Int):Int", "kind" : "def"}, {"label" : "inv", "tail" : "(x: Int): Int", "member" : "scala.group.instance.Z.inv", "link" : "scala\/group\/instance\/Z$.html#inv(x:Int):Int", "kind" : "def"}, {"label" : "id", "tail" : ": Int", "member" : "scala.group.instance.Z.id", "link" : "scala\/group\/instance\/Z$.html#id:Int", "kind" : "val"}, {"label" : "finite", "tail" : ": Boolean", "member" : "scala.group.instance.Z.finite", "link" : "scala\/group\/instance\/Z$.html#finite:Boolean", "kind" : "val"}, {"label" : "biject", "tail" : "(bi: Bijection[Int, B]): Group[B]", "member" : "scala.group.Group.biject", "link" : "scala\/group\/instance\/Z$.html#biject[B](bi:scala.group.Bijection[A,B]):scala.group.Group[B]", "kind" : "def"}, {"label" : "order", "tail" : "(x: Int): Int", "member" : "scala.group.Group.order", "link" : "scala\/group\/instance\/Z$.html#order(x:A):Int", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: collection.Iterable[B]): LazyZip2[Int, B, Z.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "scala\/group\/instance\/Z$.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.Iterable.stringPrefix", "link" : "scala\/group\/instance\/Z$.html#stringPrefix:String", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "scala\/group\/instance\/Z$.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): Z.this.type", "member" : "scala.collection.Iterable.seq", "link" : "scala\/group\/instance\/Z$.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "iterableFactory", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.Iterable.iterableFactory", "link" : "scala\/group\/instance\/Z$.html#iterableFactory:scala.collection.IterableFactory[Iterable]", "kind" : "def"}, {"label" : "coll", "tail" : "(): Z.this.type", "member" : "scala.collection.Iterable.coll", "link" : "scala\/group\/instance\/Z$.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): Z.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "scala\/group\/instance\/Z$.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): collection.Iterable[Int]", "member" : "scala.collection.IterableFactoryDefaults.empty", "link" : "scala\/group\/instance\/Z$.html#empty:CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[Int, collection.Iterable[Int]]", "member" : "scala.collection.IterableFactoryDefaults.newSpecificBuilder", "link" : "scala\/group\/instance\/Z$.html#newSpecificBuilder:scala.collection.mutable.Builder[A@scala.annotation.unchecked.uncheckedVariance,CC[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: collection.IterableOnce[Int]): collection.Iterable[Int]", "member" : "scala.collection.IterableFactoryDefaults.fromSpecific", "link" : "scala\/group\/instance\/Z$.html#fromSpecific(coll:scala.collection.IterableOnce[A@scala.annotation.unchecked.uncheckedVariance]):CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "++:", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++:", "link" : "scala\/group\/instance\/Z$.html#++:[B>:A](that:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (Int) => U): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.tapEach", "link" : "scala\/group\/instance\/Z$.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "inits", "tail" : "(): collection.Iterator[collection.Iterable[Int]]", "member" : "scala.collection.IterableOps.inits", "link" : "scala\/group\/instance\/Z$.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): collection.Iterator[collection.Iterable[Int]]", "member" : "scala.collection.IterableOps.tails", "link" : "scala\/group\/instance\/Z$.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Int) => (A1, A2, A3)): (collection.Iterable[A1], collection.Iterable[A2], collection.Iterable[A3])", "member" : "scala.collection.IterableOps.unzip3", "link" : "scala\/group\/instance\/Z$.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Int) => (A1, A2)): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.unzip", "link" : "scala\/group\/instance\/Z$.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: collection.Iterable[B], thisElem: A1, thatElem: B): collection.Iterable[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "scala\/group\/instance\/Z$.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): collection.Iterable[(Int, Int)]", "member" : "scala.collection.IterableOps.zipWithIndex", "link" : "scala\/group\/instance\/Z$.html#zipWithIndex:CC[(A@scala.annotation.unchecked.uncheckedVariance,Int)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: collection.IterableOnce[B]): collection.Iterable[(Int, B)]", "member" : "scala.collection.IterableOps.zip", "link" : "scala\/group\/instance\/Z$.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.++", "link" : "scala\/group\/instance\/Z$.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.concat", "link" : "scala\/group\/instance\/Z$.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(f: (Int) => Either[A1, A2]): (collection.Iterable[A1], collection.Iterable[A2])", "member" : "scala.collection.IterableOps.partitionMap", "link" : "scala\/group\/instance\/Z$.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Int, B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.collect", "link" : "scala\/group\/instance\/Z$.html#collect[B](pf:PartialFunction[A,B]):CC[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asIterable: (Int) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatten", "link" : "scala\/group\/instance\/Z$.html#flatten[B](implicitasIterable:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Int) => collection.IterableOnce[B]): collection.Iterable[B]", "member" : "scala.collection.IterableOps.flatMap", "link" : "scala\/group\/instance\/Z$.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Int) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.map", "link" : "scala\/group\/instance\/Z$.html#map[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Int, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "scala\/group\/instance\/Z$.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Int) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scanLeft", "link" : "scala\/group\/instance\/Z$.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): collection.Iterable[B]", "member" : "scala.collection.IterableOps.scan", "link" : "scala\/group\/instance\/Z$.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: (Int) => K)(f: (Int) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "scala\/group\/instance\/Z$.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: (Int) => K)(f: (Int) => B): Map[K, collection.Iterable[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "scala\/group\/instance\/Z$.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Int) => K): Map[K, collection.Iterable[Int]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "scala\/group\/instance\/Z$.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.slice", "link" : "scala\/group\/instance\/Z$.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "init", "tail" : "(): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.init", "link" : "scala\/group\/instance\/Z$.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.tail", "link" : "scala\/group\/instance\/Z$.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): collection.Iterator[collection.Iterable[Int]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/instance\/Z$.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): collection.Iterator[collection.Iterable[Int]]", "member" : "scala.collection.IterableOps.sliding", "link" : "scala\/group\/instance\/Z$.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): collection.Iterator[collection.Iterable[Int]]", "member" : "scala.collection.IterableOps.grouped", "link" : "scala\/group\/instance\/Z$.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Int) => Boolean): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "scala\/group\/instance\/Z$.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.dropRight", "link" : "scala\/group\/instance\/Z$.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.drop", "link" : "scala\/group\/instance\/Z$.html#drop(n:Int):C", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Int) => Boolean): (collection.Iterable[Int], collection.Iterable[Int])", "member" : "scala.collection.IterableOps.span", "link" : "scala\/group\/instance\/Z$.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Int) => Boolean): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "scala\/group\/instance\/Z$.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.takeRight", "link" : "scala\/group\/instance\/Z$.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.take", "link" : "scala\/group\/instance\/Z$.html#take(n:Int):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (collection.Iterable[Int], collection.Iterable[Int])", "member" : "scala.collection.IterableOps.splitAt", "link" : "scala\/group\/instance\/Z$.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Int) => Boolean): (collection.Iterable[Int], collection.Iterable[Int])", "member" : "scala.collection.IterableOps.partition", "link" : "scala\/group\/instance\/Z$.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Int) => Boolean): WithFilter[Int, collection.Iterable]", "member" : "scala.collection.IterableOps.withFilter", "link" : "scala\/group\/instance\/Z$.html#withFilter(p:A=>Boolean):scala.collection.WithFilter[A,CC]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (Int) => Boolean): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.filterNot", "link" : "scala\/group\/instance\/Z$.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (Int) => Boolean): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.filter", "link" : "scala\/group\/instance\/Z$.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: (Int) => collection.Iterable[B]): collection.Iterable[collection.Iterable[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "scala\/group\/instance\/Z$.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): View[Int]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/instance\/Z$.html#view(from:Int,until:Int):scala.collection.View[A]", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(that: collection.Iterable[_]): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/instance\/Z$.html#sizeCompare(that:Iterable[_]):Int", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "scala\/group\/instance\/Z$.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "scala\/group\/instance\/Z$.html#sizeCompare(otherSize:Int):Int", "kind" : "def"}, {"label" : "view", "tail" : "(): View[Int]", "member" : "scala.collection.IterableOps.view", "link" : "scala\/group\/instance\/Z$.html#view:scala.collection.View[A]", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[Int]", "member" : "scala.collection.IterableOps.lastOption", "link" : "scala\/group\/instance\/Z$.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Int", "member" : "scala.collection.IterableOps.last", "link" : "scala\/group\/instance\/Z$.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Int]", "member" : "scala.collection.IterableOps.headOption", "link" : "scala\/group\/instance\/Z$.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): Int", "member" : "scala.collection.IterableOps.head", "link" : "scala\/group\/instance\/Z$.html#head:A", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[collection.Iterable]", "member" : "scala.collection.IterableOps.companion", "link" : "scala\/group\/instance\/Z$.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): collection.Iterable[Int]", "member" : "scala.collection.IterableOps.repr", "link" : "scala\/group\/instance\/Z$.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "scala\/group\/instance\/Z$.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): collection.Traversable[Int]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "scala\/group\/instance\/Z$.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): collection.Iterable[Int]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "scala\/group\/instance\/Z$.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "scala\/group\/instance\/Z$.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "scala\/group\/instance\/Z$.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): collection.immutable.Stream[Int]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "scala\/group\/instance\/Z$.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): collection.immutable.IndexedSeq[Int]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "scala\/group\/instance\/Z$.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): collection.immutable.Seq[Int]", "member" : "scala.collection.IterableOnceOps.toSeq", "link" : "scala\/group\/instance\/Z$.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "scala\/group\/instance\/Z$.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Int, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "scala\/group\/instance\/Z$.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): collection.immutable.Vector[Int]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "scala\/group\/instance\/Z$.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): collection.immutable.List[Int]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "scala\/group\/instance\/Z$.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): collection.Iterator[Int]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "scala\/group\/instance\/Z$.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[Int, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "scala\/group\/instance\/Z$.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/instance\/Z$.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, sep: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/instance\/Z$.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: collection.mutable.StringBuilder, start: String, sep: String, end: String): collection.mutable.StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "scala\/group\/instance\/Z$.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/instance\/Z$.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/instance\/Z$.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "scala\/group\/instance\/Z$.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: collection.IterableOnce[B])(p: (Int, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "scala\/group\/instance\/Z$.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, Int) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "scala\/group\/instance\/Z$.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Int, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "scala\/group\/instance\/Z$.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (Int) => B)(cmp: math.Ordering[B]): Option[Int]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "scala\/group\/instance\/Z$.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Int) => B)(cmp: math.Ordering[B]): Int", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "scala\/group\/instance\/Z$.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (Int) => B)(cmp: math.Ordering[B]): Option[Int]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "scala\/group\/instance\/Z$.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Int) => B)(cmp: math.Ordering[B]): Int", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "scala\/group\/instance\/Z$.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: math.Ordering[B]): Option[Int]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "scala\/group\/instance\/Z$.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: math.Ordering[B]): Int", "member" : "scala.collection.IterableOnceOps.max", "link" : "scala\/group\/instance\/Z$.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: math.Ordering[B]): Option[Int]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "scala\/group\/instance\/Z$.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: math.Ordering[B]): Int", "member" : "scala.collection.IterableOnceOps.min", "link" : "scala\/group\/instance\/Z$.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "scala\/group\/instance\/Z$.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: math.Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "scala\/group\/instance\/Z$.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/instance\/Z$.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/instance\/Z$.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "scala\/group\/instance\/Z$.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "scala\/group\/instance\/Z$.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.IterableOnceOps.size", "link" : "scala\/group\/instance\/Z$.html#size:Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "scala\/group\/instance\/Z$.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.isEmpty", "link" : "scala\/group\/instance\/Z$.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Int, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "scala\/group\/instance\/Z$.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Int) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "scala\/group\/instance\/Z$.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Int, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "scala\/group\/instance\/Z$.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Int) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "scala\/group\/instance\/Z$.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "scala\/group\/instance\/Z$.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "scala\/group\/instance\/Z$.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "scala\/group\/instance\/Z$.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Int, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "scala\/group\/instance\/Z$.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Int) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "scala\/group\/instance\/Z$.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Int, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "scala\/group\/instance\/Z$.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Int) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "scala\/group\/instance\/Z$.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Int) => Boolean): Option[Int]", "member" : "scala.collection.IterableOnceOps.find", "link" : "scala\/group\/instance\/Z$.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Int) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "scala\/group\/instance\/Z$.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Int) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "scala\/group\/instance\/Z$.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Int) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "scala\/group\/instance\/Z$.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Int) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "scala\/group\/instance\/Z$.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "scala\/group\/instance\/Z$.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "scala\/group\/instance\/Z$.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[Int, S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "scala\/group\/instance\/Z$.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/instance\/Z$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/instance\/Z$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/instance\/Z$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/instance\/Z$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/instance\/Z$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/instance\/Z$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/instance\/Z$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Z$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Z$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Z$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/instance\/Z$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/instance\/Z$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/instance\/Z$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/instance\/Z$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/instance\/Z$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/instance\/Z$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/instance\/Z$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/instance\/Z$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "scala.group.instance.Zn", "shortDescription" : "Factory for the cyclic group of a specified order, where the elements are represented as integers.", "object" : "scala\/group\/instance\/Zn$.html", "members_object" : [{"label" : "apply", "tail" : "(n: Int): ModGroup", "member" : "scala.group.instance.Zn.apply", "link" : "scala\/group\/instance\/Zn$.html#apply(n:Int):scala.group.instance.Zn.ModGroup", "kind" : "def"}, {"label" : "hashmap", "tail" : ": Map[Int, ModGroup]", "member" : "scala.group.instance.Zn.hashmap", "link" : "scala\/group\/instance\/Zn$.html#hashmap:scala.collection.mutable.Map[Int,scala.group.instance.Zn.ModGroup]", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "scala\/group\/instance\/Zn$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (FiniteGroup[Int]) => A): (Int) => A", "member" : "scala.Function1.andThen", "link" : "scala\/group\/instance\/Zn$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Int): (A) => FiniteGroup[Int]", "member" : "scala.Function1.compose", "link" : "scala\/group\/instance\/Zn$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scala\/group\/instance\/Zn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scala\/group\/instance\/Zn$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scala\/group\/instance\/Zn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scala\/group\/instance\/Zn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scala\/group\/instance\/Zn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scala\/group\/instance\/Zn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scala\/group\/instance\/Zn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Zn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Zn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scala\/group\/instance\/Zn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scala\/group\/instance\/Zn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scala\/group\/instance\/Zn$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scala\/group\/instance\/Zn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scala\/group\/instance\/Zn$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scala\/group\/instance\/Zn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scala\/group\/instance\/Zn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scala\/group\/instance\/Zn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scala\/group\/instance\/Zn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};